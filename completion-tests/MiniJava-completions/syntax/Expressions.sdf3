module Expressions

imports Lexical

sorts

  Exp VarRef

context-free syntax

  Exp.True = <true> 
  Exp.False = <false> 
  Exp.This = <this> 
  VarRef.VarRef = ID 
  Exp = <<VarRef>> 
  Exp.IntValue = <<INT>> 
  Exp.Not = <!<Exp>> 
  Exp.Add = <<Exp> + <Exp>> {left}
  Exp.Sub = <<Exp> - <Exp>> {left}
  Exp.Mul = <<Exp> * <Exp>> {left}
  Exp.Lt = [[Exp] < [Exp]] {left}
  Exp.And = <<Exp> && <Exp>> {left}
  Exp.Call = <<Exp>.<ID>(<{Exp ", "}*>)> 
  Exp.NewArray = <new int [<Exp>]> 
  Exp.Subscript = <<Exp>[<IndexExp>]> 
  IndexExp = <<Exp>> 
  Exp.Length = <<Exp>.length> 
  Exp.NewObject = <new <ID>()> 
  Exp = <(<Exp>)> {bracket}

// manual completion recovery rules
  
 // VarRef.VarRef-Plhdr = {placeholder-insertion}


context-free priorities

    { Exp.Subscript Exp.Call Exp.Length } 
  > Exp.Not 
  > Exp.Mul 
  > { left : Exp.Add Exp.Sub } 
  > Exp.Lt 
  > Exp.And

template options

  keyword -/- [A-Za-z]
  tokenize : ".("
