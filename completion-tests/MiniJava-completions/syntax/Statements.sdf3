module Statements

imports Expressions Lexical

sorts

  Statement

context-free syntax

  Statement.Block = <
  {
    <{Statement "\n"}*>
  }> 
  Statement.Assign = <<VarRef> = <Exp>;> 
  Statement.ArrayAssign = <<VarRef>[<Exp>] = <Exp>;> 
  Statement.If = <
    if(<Exp;text="true">) <Statement>
    else <Statement>> 
  Statement.While = <
  	while(<Exp;text="true">) <Statement;text="{}">> 
  Statement.Print = <System.out.println(<Exp>);> 



// manual completion recovery rules
  
///  Exp.Exp-Plhdr = {placeholder-insertion}

//  Statement.Statement-Plhdr = {new-completion}

lexical syntax
  
 // "if"   = {new-completion}
 // "if"   = [i] {new-completion}
 // "else" = {new-completion}
 // "else" = [e] {new-completion}
 // "else" = [e] [l] {new-completion}
 // "else" = [e] [l] [s] {new-completion}
 // ")"    = {new-completion}
 // "("    = {new-completion}
 // "="    = {literal-completion}
 // ";"    = {literal-completion}



template options

  keyword -/- [A-Za-z]
  tokenize : ".(;"
