module Classes

imports 

  Statements	
  Lexical	
  Expressions

sorts

  ClassDecl ParentDecl FieldDecl MethodDecl VarDecl ParamDecl Type ID INT
  
context-free syntax
  
  ClassDecl.Class = <
    class <ID> <ParentDecl;hide>{ 
      <{FieldDecl "\n"}*>
       
      <{MethodDecl "\n"}*> 
    }> 
  ParentDecl.NoParent = <> 
  ParentDecl.Parent = <extends <ID> > 
  FieldDecl.Field = <<Type> <ID>;> 
  MethodDecl.Method = <
    public <Type> <ID>(<{ParamDecl ", "}*>) { 
      <{VarDecl "\n"}*> 
      
      <{Statement "\n"}*>
      return <Exp>; 
    }> 
  VarDecl.Var = <<Type> <ID>;> 
  ParamDecl.Param = <<Type> <ID>> 
  Type.Int = <int> 
  Type.Bool = <boolean> 
  Type.IntArray = <int[]> 
  Type.ClassType = ID
  
// custom completion recovery rules
/*context-free syntax

Type.Type-Plhdr = {placeholder-insertion}
ID.ID-Plhdr     = {placeholder-insertion}
VarDecl.VarDecl-Plhdr = {placeholder-insertion}*/

template options

  tokenize : "["
  keyword  -/- [a-zA-Z]
