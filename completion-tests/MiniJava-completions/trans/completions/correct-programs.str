module correct-programs

imports
    include/MiniJava-completions
    editor-common.generated
    new-completions/-
    pp
    runtime/refactoring/-
    runtime/editor/origins
    src-gen/pp/-
    completions/completions

rules

    get-proposals-placeholder:
      placeholder -> proposal* 
      where
        suggestion-is := <new-iset>;
        suggestion*   := <try(suggest-completions(|suggestion-is)); <iset-elements> suggestion-is> placeholder;
        proposal*     := <map(get-text-from-placeholder-expand(|placeholder))> suggestion*   
        
         
    get-text-from-placeholder-expand(|old-term) :
      (name, completion-term) ->(name, description, change)
      where
        change      := REPLACE_TERM(old-term, completion-term);
        description := <build-description> change             
           
    get-proposals-list:
      (list, placeholder, cursor-position) -> proposal* 
      where
        suggestion-is := <new-iset>;
        suggestion*   := <try(suggest-completions(|suggestion-is)); <iset-elements> suggestion-is> placeholder;
        proposal*     := <map(get-proposals-from-list(|list, cursor-position))> suggestion*      
                
    get-proposals-from-list(|list, cursor-pos):
      (name, new-elem) -> (name, description, change)
      where
        change     := <calculate-completion-change> (cursor-pos, list, new-elem);
        description := <build-description> change       
    
    calculate-completion-change:
        (cursor-pos, list, new-elem) -> change
        where
        index       := <get-index-cursor-position(|1)> (cursor-pos, list);
        length      := <length> list;
        if <gt> (index, length) then
            change := INSERT_AT_END(list, [new-elem])
        else
            change := INSERT_BEFORE(<index(|index)> list, [new-elem])
        end    
        
    add-list-pos(|new-elem, pos):
        [] -> [new-elem]
                
    add-list-pos(|new-elem, pos):
        list@[h | hs] -> [new-elem | list]            
        where
            (start-offset, end-offset) := <origin-offset> h;
            <geq> (start-offset, pos)
            
    add-list-pos(|new-elem, pos):
        list@[h | hs] -> [h, <add-list-pos(|new-elem, pos)>  hs]            
        where
            (start-offset, end-offset) := <origin-offset> h;
            <geq> (pos, end-offset)         
            
    get-proposals-optional:
       (term, placeholder) -> proposal*
       where
         suggestion-is := <new-iset>;
         suggestion*   := <try(suggest-completions(|suggestion-is)); <iset-elements> suggestion-is> placeholder;
         proposal*     := <map(get-proposals-from-optional(|term))> suggestion*
         
    get-proposals-from-optional(|old-term):
       (name, new-elem) -> (name, description, change)
       where
       change      := REPLACE_TERM(old-term, new-elem);
       description := <build-description> change            

//build description for completion inside lists in correct programs
rules

  build-description:
      INSERT_AT_END(old-list, [completion-term]) ->  text
      where
        <?[]> old-list
      with
         parent             := <get-parent> old-list; 
         index              := <find-position> (old-list, parent);
         leading-ws         := <get-leading-ws> (parent, index); 
         indent             := <get-indent> (parent, index); 
         parent-indent      := <origin-indent <+ !""> parent; 
         reconstructed-text := <construct-text-by-pp(pp-partial-MiniJava-completions-string, override-reconstruction, resugar)> completion-term;
         if <is-substring(!"\n")> leading-ws then
            text := <concat-strings> [leading-ws, <replace-indentation(|indent, ""); prefix-lines(|parent-indent)> reconstructed-text]
         else
            text := <concat-strings> [leading-ws, <replace-indentation(|indent, "")> reconstructed-text]
         end
   
   build-description:
      INSERT_AT_END(old-list, [completion-term]) -> text
      where
        <not(?[])> old-list
      with
         parent        := <get-parent> old-list; 
         index         := <find-position> (old-list, parent);
         sep           := <get-separator> (parent, index);
         indent        := <get-indent> (parent, index); 
         parent-indent := <origin-indent <+ !""> parent; 
         reconstructed-text := <construct-text-by-pp(pp-partial-MiniJava-completions-string, override-reconstruction, resugar)> completion-term;
         separator     := <concat-strings> [sep, indent];
         if <is-substring(!"\n")> separator then
            text := <concat-strings> [sep, <prefix-lines(|<conc-strings> (indent, parent-indent))> reconstructed-text]
         else
            text := <concat-strings> [sep, <prefix-lines(|indent)> reconstructed-text]
         end
   
   build-description:
      INSERT_BEFORE(old-node, [completion-term]) -> text
      where
        parent                := <get-parent> old-node; // the list in which old node is
        grandparent           := <get-parent> parent; // the node in which the list is (to get separator, indent and leading ws)
        index-old-term        := <get-index-origin(|1)> (old-node, parent);
        index-parent          := <find-position> (parent, grandparent);
        sep                   := <get-separator> (grandparent, index-parent);
        indent                := <get-indent> (grandparent, index-parent);
        leading-ws            := <get-leading-ws> (grandparent, index-parent); 
        grandparent-indent    := <origin-indent <+ !""> grandparent;
        reconstructed-text    := <construct-text-by-pp(pp-partial-MiniJava-completions-string, override-reconstruction, resugar)> completion-term;
        // indent according to the parent in case there is a new line in the leading ws
        if <is-substring(!"\n")> leading-ws then
           leading-ws-indent := grandparent-indent
        else
           leading-ws-indent := ""
        end;
        //indent according to the parent in case the separator has a new line
        if <is-substring(!"\n")> sep then
           separator-indent := <concat-strings> [indent, grandparent-indent]
        else
           separator-indent := <concat-strings> [indent]
        end;       
        if <?1> index-old-term then // inserting at the beginning of the list
            text := <concat-strings> [leading-ws, <replace-indentation(|indent, ""); prefix-lines(|leading-ws-indent)> reconstructed-text, sep, separator-indent]
        else //inserting in the middle of the list
            text := <concat-strings> [sep, <prefix-lines(|separator-indent)> reconstructed-text, sep, separator-indent]
        end
  
  
  //TODO: if it's a placeholder replacement, the surrounding layout and indentation is determined by the layout and indentation from the placeholder      
  build-description:
    REPLACE_TERM(old-term, completion-term) -> text
    where
        parent             := <get-parent> old-term;
        if <is-list> parent then //in case old-term is an element of a list
            grandparent        := <get-parent> parent;
            grandparent-indent := <origin-indent> grandparent;
            index              := <find-position> (parent, grandparent);
            indent             := <get-indent> (grandparent, index);
            index-list         := <get-index-origin(|1)> (old-term, parent);
            reconstructed-text := <construct-text-by-pp(pp-partial-MiniJava-completions-string, override-reconstruction, resugar)> completion-term;
            if <?1> index-list then // if it is the first element, add the leading ws
              leading-ws  := <get-leading-ws> (grandparent, index);
              if <is-substring(!"\n")> leading-ws then
                text := <concat-strings> [leading-ws, <replace-indentation(|indent, ""); prefix-lines(|grandparent-indent)> reconstructed-text]
              else
                text := <concat-strings> [leading-ws, <replace-indentation(|<conc-strings> (indent, grandparent-indent), "")> reconstructed-text]
              end
            else // else, add the ws after the separator
              sep    := <get-separator> (grandparent, index);
              ws-sep := <get-trailing-ws> sep;
              if <is-substring(!"\n")> sep then
                text := <concat-strings> [ws-sep, <prefix-lines(|<conc-strings> (indent, grandparent-indent))> reconstructed-text]
              else
                text := <concat-strings> [ws-sep, <replace-indentation(|<conc-strings> (indent, grandparent-indent), "")> reconstructed-text]
              end
            end            
        else
            index              := <find-position> (old-term, parent);
            leading-ws         := <get-leading-ws> (parent, index); <debug(!"leading ws ")> Foo(leading-ws);
            indent             := <get-indent> (parent, index); <debug(!"indent ")> Foo(indent);
            reconstructed-text := <construct-text-by-pp(pp-partial-MiniJava-completions-string, override-reconstruction, resugar)> completion-term;
            if <is-substring(!"\n")> leading-ws then
                text := <concat-strings> [leading-ws, <replace-indentation(|indent, "")> reconstructed-text]
             else
                text := <concat-strings> [leading-ws, reconstructed-text]
             end      
        end
        
   get-trailing-ws:
    string -> ws
    where
        chars     := <explode-string> string;
        rev-chars := <reverse> chars;
        ws-chars  := <take-until(not(?' ' + ?'\t' + ?'\n'))> rev-chars;
        ws        := <implode-string>
             
    
    