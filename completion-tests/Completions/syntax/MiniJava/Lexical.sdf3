module MiniJava/Lexical

sorts

  INT ID

lexical syntax

  INT = [0-9]+ 
  ID = [a-zA-Z] [a-zA-Z0-9\_]* 
  MainID = "main" 
  LAYOUT = [\ \t\n\r] 
  LAYOUT = "//" ~[\n]* [\n] | EOF 
  LAYOUT = BlockComment 
  EOF =  
  BlockComment = "/*" CommPart* "*/" 
  CommPart = BlockComment 
  CommPart = ~[\/\*] 
  CommPart = Asterisk 
  CommPart = Slash 
  Asterisk = [\*] 
  Slash = [\/] 

lexical restrictions

  INT -/- [0-9]
  ID -/- [a-zA-Z0-9\_]
  Asterisk -/- [\/]
  Slash -/- [\*]
  EOF -/- ~[]

context-free restrictions

  LAYOUT? -/- [\ \t\n\r]
  LAYOUT? -/- [\/].[\/]
  LAYOUT? -/- [\/].[\*]

lexical syntax

  ID = "abstract" {reject}
  ID = "assert" {reject}
  ID = "boolean" {reject}
  ID = "break" {reject}
  ID = "byte" {reject}
  ID = "case" {reject}
  ID = "catch" {reject}
  ID = "char" {reject}
  ID = "class" {reject}
  ID = "const" {reject}
  ID = "continue" {reject}
  ID = "default" {reject}
  ID = "do" {reject}
  ID = "double" {reject}
  ID = "else" {reject}
  ID = "enum" {reject}
  ID = "extends" {reject}
  ID = "final" {reject}
  ID = "finally" {reject}
  ID = "float" {reject}
  ID = "for" {reject}
  ID = "goto" {reject}
  ID = "if" {reject}
  ID = "implements" {reject}
  ID = "import" {reject}
  ID = "instanceof" {reject}
  ID = "int" {reject}
  ID = "interface" {reject}
  ID = "long" {reject}
  ID = "native" {reject}
  ID = "new" {reject}
  ID = "package" {reject}
  ID = "private" {reject}
  ID = "protected" {reject}
  ID = "public" {reject}
  ID = "return" {reject}
  ID = "short" {reject}
  ID = "static" {reject}
  ID = "strictfp" {reject}
  ID = "super" {reject}
  ID = "switch" {reject}
  ID = "synchronized" {reject}
  ID = "this" {reject}
  ID = "throw" {reject}
  ID = "throws" {reject}
  ID = "transient" {reject}
  ID = "try" {reject}
  ID = "void" {reject}
  ID = "volatile" {reject}
  ID = "while" {reject}
  ID = "true" {reject}
  ID = "false" {reject}
  ID = "null" {reject}
