module editor/build-normalizer

imports
  editor/build-utils
  normalization/to-normal-form
  generation/syntax/to-sdf
  pp

imports
  signatures/TemplateLang-sig
  signatures/modules/Modules-sig
  
rules

  sdf3-to-normal-form-sdf:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      normalized   := <to-normal-form(|$[[project-path]/[<dirname> path]])> selected;
      <?Module(Unparameterized(mn), i*, sections)> ast ;
      chars := <collect-one(?Tokenize(<id; explode-string; un-double-quote-chars>)) <+ !['(', ')']> sections;
      newline := <collect-one(?Newlines(<id>)) <+ !None()> sections;
      kfr := <collect-one(?KeywordFollowRestriction(<id; term-translation>)) <+ !None()> sections;
      result := <to-sdf(|chars, newline, kfr); pp-sdf-to-string <+ !""; debug(!"The sdf file could not be generated.\n"); fail> normalized;
      filename := <create-src-gen(|project-path, "syntax",  "-normalized.sdf")> mn

  sdf3-to-normal-form:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      <?Module(Unparameterized(mn), i*, sections)> ast ;
      filename := <create-src-gen(|project-path, "syntax",  "-normalized.sdf3")> mn;
      result   := <to-normal-form(|$[[project-path]/[<dirname> path]]); pp-SDF3-string> selected  
    
  sdf3-to-normal-form-abstract:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      <?Module(Unparameterized(mn), i*, sections)> ast ;
      filename := <create-src-gen(|project-path, "syntax",  "-normalized.aterm")> mn;
      result   := <to-normal-form(|$[[project-path]/[<dirname> path]])> selected
