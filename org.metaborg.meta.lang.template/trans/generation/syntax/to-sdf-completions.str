module generation/syntax/to-sdf-completions

imports
  libstratego-lib
  libstratego-sglr
  libstratego-gpp
  utils/attributes
  utils/misc
  utils/tokenize
  names/analysis/names
  runtime/nabl/utils
  analysis/attributes
  analysis/desugar
  generation/syntax/to-sdf
  pp/layout-constraints/Layout-Constraints-pp

imports
  signatures/aliases/-
  signatures/aterms/-
  signatures/basic/-
  signatures/characterclass/-
  signatures/constants/-
  signatures/grammar/-
  signatures/kernel/-
  signatures/labels/-
  signatures/layout/-
  signatures/layout-constraints/-
  signatures/lifting/-
  signatures/literals/-
  signatures/modules/-
  signatures/priority/-
  signatures/regular/-
  signatures/renaming/-
  signatures/restrictions/-
  signatures/sdf2-core/-
  signatures/sorts/-
  signatures/symbols/-
  signatures/TemplateLang-sig

rules 
  placeholder-chars = prim("SSL_EXT_placeholder_chars") <+ ("[[", "]]")

rules
 
  module-to-sdf-completions:
    Module(Unparameterized(mn), i, sections) ->
      'module(unparameterized($[[mn]-completions]), [imports('module(unparameterized(mn))), imports], exports)
    with
      if [] := sections
      then
        exports := []
      else
          exports := [exports(<filter(section-to-sdf-completions)> sections), exports(lexical-syntax([ prod([], sort("COMPLETION-INSERTION"), no-attrs())]))]
      end;
      imports := <map(imports-to-sdf-completions)> i

  module-to-sdf-completions:
    Module(Unparameterized(mn)) -> 'module(unparameterized($[[mn]-completions])) 
  
  imports-to-sdf-completions: 
    Imports(mod) -> imports(i)
    with
      i := <map(module-to-sdf-completions)> mod
    
  //productive productions section
  section-to-sdf-completions:
  	SDFSection(ContextFreeSyntax(prods*)) -> [plhdr-prods*, lit-prods*]
  	with
  		prods' := <map(prod-to-sdf <+ prod-to-sdf(|['(', ')'], None()))> prods*;
  		//content complete prods
        sorts*     := < collect(?SortDef(<strip-annos>) <+ ?Sort(<strip-annos>))
                        ; nub> prods*;
        lits*        := <collect(?lit(_)); nub> prods';
        lit-ins*  := <map(lit-to-lit-insertion-prod); term-translation> lits*;
        if [] := lits* then
            lit-prods* := []
        else
            lit-prods* := [lexical-syntax([lit-ins*])]
        end;                
        plhdr*     := <map(sort-to-plhdr-prod); term-translation> sorts*;
        plhdr-ins* := <map(sort-to-plhdr-ins-prod); term-translation> sorts*;      
        if [] := sorts* then
            plhdr-prods* := []
        else
            plhdr-prods* := [context-free-syntax([plhdr*, plhdr-ins*])]
        end
      