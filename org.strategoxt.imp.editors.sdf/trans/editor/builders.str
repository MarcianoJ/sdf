module editor/builders

imports include/SDF
		trans/generation/-
		editor-common.generated
		lib/sdf3/TemplateLang-pp
		libstratego-gpp

  rules
  	
   generate-sdf3-abstract:
    (selected, position, ast, path, project-path) -> (filename, result)
    where
      <?'module(unparameterized(mn), i*, e*)> ast ;
      filename := <create-src-gen(|project-path, "syntax-sdf3", ".sdf3.aterm")> mn;
      result   := <module-to-sdf3> ast
    
   generate-sdf3-concrete:
    (selected, position, ast, path, project-path) -> (filename, result)
    where
      <?'module(unparameterized(mn), i*, e*)> ast ;
      filename := <create-src-gen(|project-path, "syntax-sdf3", ".sdf3")> mn;
      result   := <module-to-sdf3; pp-SDF3-string> ast 	  	 	
  
    

  // When given a tuple (path, string) this writes string into path.
  write-string-to-file =
  	?(filename, string);
  	if <dirname; readdir> filename then
	    with(
	      handle := <fopen> (filename, "w");
	      <fputs> (string, handle);
	      <fclose> handle;
	      <refresh-workspace-file> filename
	    )
	  end
	  
  create-src-gen(|project-path, folder, ext):
  	filename -> filename'
  with
  	fn := <get-filename> filename; 
  	src-gen-path := <concat-strings; create-dir> [project-path, "/src-gen"];
  	src-gen-folder := <concat-strings; create-dir> [src-gen-path, "/" ,folder];
  	file-folder := <get-dir(|src-gen-folder)> filename ;
  	filename' := <concat-strings> [file-folder, "/" , fn, ext]
  	
  
    get-dir(|path) :
 		s -> s'
 		with
 			names := <strip-annos; string-tokenize(|['/'])> s;
 			names' := <at-last(![])> names;
 		//	debug(!"names ");
 			if [h | tl] := names'
 			then 			
	 			first := <concat-strings> [path, "/" ,h]; 
	 		//	debug(!"get-dir ");
	 			<create-dirs(|first)> tl;
	 		//	debug(!"create-dirs ");
	 			s' := <concat-strings> [path, "/",  <at-last(separate-by(|"/")); concat-strings> names']
 		    else
 		    	s' := path
 		    end
 			
   
   create-dir  = not( file-exists ; filemode ; isdir) < mkdir + id
   
   create-dirs(|dir):
   	[h | tl] -> None()
   	where
   		<create-dir> dir;
	   	new-dir := <concat-strings> [dir, "/", h];
	 //  	debug(!"create-dirs new dir ");
	   	<create-dirs(|new-dir)> tl
   	
   	create-dirs(|dir):
   	[] -> None()
   	where
   		<create-dir> dir
   	//	; debug(!"create-dirs empty ")
  
 	get-filename :
 		s -> s'
 		with
 			names := <strip-annos; string-tokenize(|['/'])> s;
 			//debug(!"names ");
 			s' := <last> names
 			
  
  	pp-SDF3-string =
    prettyprint-Module 
    ; !V([], <id>)
    ; box2text-string(|120)
  		
  