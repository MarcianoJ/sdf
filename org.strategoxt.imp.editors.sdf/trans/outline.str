module editor/outline

imports
	include/SDF
	lib/attributes
	lib/editor-common.generated
	lib/outline-library.generated

rules
 
	outline-strategy = simple-label-outline-with-parent
  
    simple-label-outline-with-parent = ?ast; simple-label-outline-with-parent(|ast)
	simple-label-outline-with-parent(|parent) = collect-om(to-outline-node(|parent), conc)
	
	to-outline-node(|parent):
		term -> Node(label, children)
		where
			label := <origin-track-forced(to-outline-label <+ to-outline-label(|parent))> term;
			children := <get-arguments; simple-label-outline-with-parent(|term)> term
	
	outline-expand-to-level = !5

overlays
	
	Icon(name) = <concat-strings> ["icons/", name, ".png"]
	
	Icon-module = Icon("module")
	Icon-exports = Icon("exports")
	Icon-start = Icon("start")
	Icon-prod-lex = Icon("prod-lex")
	Icon-prod-cf = Icon("prod-cf")
	Icon-prod-cf-cons = Icon("prod-cf-cons")
	Icon-layout = Icon("layout")
	
rules
	
	to-outline-label:
		'module(moduleName, _, _) -> label {Icon-module}
		where
			<?unparameterized(label) + ?parameterized(label, _)> := moduleName

	to-outline-label:
		appl -> label {Icon-exports}
		where
			<?lexical-syntax(_) +
			?context-free-syntax(_) +
			?variables(_) +
			?lexical-variables(_) +
			?lexical-priorities(_) +
			?context-free-priorities(_) +
			?lexical-restrictions(_) +
			?context-free-restrictions(_) + 
			?aliases(_) + 
			?restrictions(_) +
			?syntax(_) +
			start-symbols> appl;
			label := <appl-to-outline-label> appl
	
	to-outline-label(|parent):
		sort(startSymbol) -> startSymbol {Icon-start}
		where
			<start-symbols> parent
	
	to-outline-label(|parent):
		p@prod(_, sort, attrs) -> label {icon}
		where
			label' := <sort-to-label> sort;
			if <?context-free-syntax(_)> parent
			then
				if cons-name := <fetch-cons-name> attrs
				then
					label := <concat-strings> [label', ".", cons-name];
					icon := Icon-prod-cf-cons
				else
					label := label';
					icon := Icon-prod-cf
				end
			else
				label := label';
				if <?layout()> sort
				then icon := Icon-layout
				else icon := Icon-prod-lex
				end
			end
	
rules

	start-symbols = 
		?kernel-start-symbols(_) + 
		?lexical-start-symbols(_) + 
		?context-free-start-symbols(_)
	
	appl-to-outline-label:
		appl -> label
		where
			label := <
				get-constructor; 
				string-replace(|"context-free-", "context-free "); 
				string-replace(|"lexical-", "lexical ")
			> appl	
	
	sort-to-label: layout() -> "LAYOUT"
	sort-to-label: sort(s) -> s
	sort-to-label: lex(sort(s)) -> <conc-strings> (s, "-LEX")
	sort-to-label: cf(sort(s)) -> <conc-strings> (s, "-CF")
