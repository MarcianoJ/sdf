module editor/outline

imports
	include/SDF
	lib/attributes
	lib/editor-common.generated
	lib/outline-library.generated

rules
	
	outline-strategy = custom-label-outline(to-outline-label)
	
rules
	
	to-outline-label: 'module(unparameterized('id), _, _) -> 'id
	to-outline-label: 'module(parameterized('id, _), _, _) -> 'id

	to-outline-label:
		appl -> label
		where
			<?lexical-syntax(_) +
			?context-free-syntax(_) +
			?variables(_) +
			?lexical-variables(_) +
			?lexical-priorities(_) +
			?context-free-priorities(_) +
			?lexical-restrictions(_) +
			?context-free-restrictions(_) + 
			?aliases(_) + 
			?restrictions(_) +
			?kernel-start-symbols(_) +
			?lexical-start-symbols(_) +
			?context-free-start-symbols(_) +
			?syntax(_) +
			?exports(_) +
			?imports(_)> appl;
			label := <get-constructor; string-replace(|"context-free-", "context-free "); string-replace(|"lexical-", "lexical ")> appl
			
	to-outline-label:
		p@prod(_, sort, attrs) -> label
		where
			sort-name := <fetch-sort-name> sort;
			if <fetch-cons-name> attrs
			then 
				cons-name := <fetch-cons-name> attrs;
				label := <concat-strings> [sort-name, " {\"", cons-name, "\"}"]
			else label := sort-name
			end
		
	
	fetch-sort-name: sort(s) -> s
	fetch-sort-name: lex(sort(s)) -> <conc-strings> (s, "-LEX")
	fetch-sort-name: cf(sort(s)) -> <conc-strings> (s, "-CF")
	
			