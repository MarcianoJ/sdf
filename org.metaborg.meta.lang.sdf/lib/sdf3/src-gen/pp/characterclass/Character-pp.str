module src-gen/pp/characterclass/Character-pp

imports
  libstratego-gpp
  runtime/tmpl/pp
  libstratego-sglr
  src-gen/signatures/characterclass/Character-sig


strategies
  prettyprint-NumChar =
    ![S(<is-string>)]

  prettyprint-ShortChar =
    ![S(<is-string>)]

  prettyprint-example =
    prettyprint-NumChar

  prettyprint-example =
    prettyprint-ShortChar

  prettyprint-NumChar :
    amb([h|hs]) -> <prettyprint-NumChar> h

  prettyprint-ShortChar :
    amb([h|hs]) -> <prettyprint-ShortChar> h


strategies
  prettyprint-example =
    prettyprint-Character

  prettyprint-Character :
    Numeric(t1__) -> [ H(
                         [SOpt(HS(), "0")]
                       , [t1__']
                       )
                     ]
    with t1__' := <pp-one-Z(prettyprint-NumChar)> t1__

  is-Character =
    ?Numeric(_)

  prettyprint-Character :
    Short(t1__) -> [ H(
                       [SOpt(HS(), "0")]
                     , [t1__']
                     )
                   ]
    with t1__' := <pp-one-Z(prettyprint-ShortChar)> t1__

  is-Character =
    ?Short(_)

  prettyprint-Character :
    Top() -> [ H(
                 [SOpt(HS(), "0")]
               , [S("\\TOP")]
               )
             ]

  is-Character =
    ?Top()

  prettyprint-Character :
    Eof() -> [ H(
                 [SOpt(HS(), "0")]
               , [S("\\EOF")]
               )
             ]

  is-Character =
    ?Eof()

  prettyprint-Character :
    Bot() -> [ H(
                 [SOpt(HS(), "0")]
               , [S("\\BOT")]
               )
             ]

  is-Character =
    ?Bot()

  prettyprint-Character :
    LabelStart() -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("\\LABEL_START")]
                      )
                    ]

  is-Character =
    ?LabelStart()

  is-Character =
    fail

  prettyprint-Character :
    amb([h|hs]) -> <prettyprint-Character> h