module lib/sdf3/src-gen/pp/basic/Basic-pp

imports
  libstratego-gpp
  runtime/tmpl/pp
  libstratego-sglr
  lib/sdf3/src-gen/signatures/basic/Basic-sig


imports
  lib/sdf3/src-gen/signatures/kernel/Kernel-sig
  lib/sdf3/src-gen/signatures/sorts/Sorts-sig
  lib/sdf3/src-gen/signatures/TemplateLang-sig


imports
  lib/sdf3/src-gen/pp/kernel/Kernel-pp
  lib/sdf3/src-gen/pp/sorts/Sorts-pp
  lib/sdf3/src-gen/pp/TemplateLang-pp


strategies
  prettyprint-example =
    prettyprint-Grammar

  prettyprint-example =
    prettyprint-Symbol

  prettyprint-Grammar :
    Lexical(t1__) -> [ H(
                         [SOpt(HS(), "0")]
                       , [S("lexical syntax")]
                       )
                     , H(
                         []
                       , [S("")]
                       )
                     , t1__'
                     , H(
                         []
                       , [S("")]
                       )
                     ]
    with t1__' := <pp-indent(|"2")> [<pp-one-Z(prettyprint-Productions)> t1__]

  is-Grammar =
    ?Lexical(_)

  prettyprint-Grammar :
    Contextfree(t1__) -> [ H(
                             [SOpt(HS(), "0")]
                           , [S("context-free syntax")]
                           )
                         , H(
                             []
                           , [S("")]
                           )
                         , t1__'
                         , H(
                             []
                           , [S("")]
                           )
                         ]
    with t1__' := <pp-indent(|"2")> [<pp-one-Z(prettyprint-Productions)> t1__]

  is-Grammar =
    ?Contextfree(_)

  prettyprint-Grammar :
    Variables(t1__) -> [ H(
                           [SOpt(HS(), "0")]
                         , [S("variables")]
                         )
                       , H(
                           []
                         , [S("")]
                         )
                       , t1__'
                       , H(
                           []
                         , [S("")]
                         )
                       ]
    with t1__' := <pp-indent(|"2")> [<pp-one-Z(prettyprint-Productions)> t1__]

  is-Grammar =
    ?Variables(_)

  prettyprint-Grammar :
    VariablesProductive(t1__) -> [ H(
                                     [SOpt(HS(), "0")]
                                   , [S("variables")]
                                   )
                                 , H(
                                     []
                                   , [S("")]
                                   )
                                 , t1__'
                                 , H(
                                     []
                                   , [S("")]
                                   )
                                 ]
    with t1__' := <pp-indent(|"2")> [<pp-V-list(prettyprint-SdfProduction)> t1__]

  is-Grammar =
    ?VariablesProductive(_)

  prettyprint-Grammar :
    LexVariables(t1__) -> [ H(
                              [SOpt(HS(), "0")]
                            , [S("lexical variables")]
                            )
                          , H(
                              []
                            , [S("")]
                            )
                          , t1__'
                          , H(
                              []
                            , [S("")]
                            )
                          ]
    with t1__' := <pp-indent(|"2")> [<pp-one-Z(prettyprint-Productions)> t1__]

  is-Grammar =
    ?LexVariables(_)

  prettyprint-Grammar :
    LexVariablesProductive(t1__) -> [ H(
                                        [SOpt(HS(), "0")]
                                      , [S("lexical variables")]
                                      )
                                    , H(
                                        []
                                      , [S("")]
                                      )
                                    , t1__'
                                    , H(
                                        []
                                      , [S("")]
                                      )
                                    ]
    with t1__' := <pp-indent(|"2")> [<pp-V-list(prettyprint-SdfProduction)> t1__]

  is-Grammar =
    ?LexVariablesProductive(_)

  prettyprint-Symbol :
    Cf(t1__) -> [ H(
                    [SOpt(HS(), "0")]
                  , [t1__', S("-CF")]
                  )
                ]
    with t1__' := <pp-one-Z(prettyprint-Symbol)> t1__

  is-Symbol =
    ?Cf(_)

  prettyprint-Symbol :
    Lex(t1__) -> [ H(
                     [SOpt(HS(), "0")]
                   , [t1__', S("-LEX")]
                   )
                 ]
    with t1__' := <pp-one-Z(prettyprint-Symbol)> t1__

  is-Symbol =
    ?Lex(_)

  prettyprint-Symbol :
    Varsym(t1__) -> [ H(
                        [SOpt(HS(), "0")]
                      , [t1__', S("-VAR")]
                      )
                    ]
    with t1__' := <pp-one-Z(prettyprint-Symbol)> t1__

  is-Symbol =
    ?Varsym(_)

  prettyprint-Symbol :
    Layout() -> [ H(
                    [SOpt(HS(), "0")]
                  , [S("LAYOUT")]
                  )
                ]

  is-Symbol =
    ?Layout()

  is-Grammar =
    fail

  is-Symbol =
    fail

  prettyprint-Grammar :
    amb([h|hs]) -> <prettyprint-Grammar> h

  prettyprint-Symbol :
    amb([h|hs]) -> <prettyprint-Symbol> h