package trans;

import org.strategoxt.stratego_lib.*;
import org.strategoxt.stratego_lib.*;
import org.strategoxt.stratego_sglr.*;
import org.strategoxt.stratego_gpp.*;
import org.strategoxt.stratego_xtc.*;
import org.strategoxt.stratego_aterm.*;
import org.strategoxt.stratego_sdf.*;
import org.strategoxt.strc.*;
import org.strategoxt.imp.editors.template.generated.*;
import org.strategoxt.java_front.*;
import org.strategoxt.lang.*;
import org.spoofax.interpreter.terms.*;
import static org.strategoxt.lang.Term.*;
import org.spoofax.interpreter.library.AbstractPrimitive;
import java.util.ArrayList;
import java.lang.ref.WeakReference;

@SuppressWarnings("unused") public class InteropRegisterer extends org.strategoxt.lang.InteropRegisterer 
{ 
  @Override public void register(org.spoofax.interpreter.core.IContext context, Context compiledContext)
  { 
    register(context, compiledContext, context.getVarScope());
  }

  @Override public void registerLazy(org.spoofax.interpreter.core.IContext context, Context compiledContext, ClassLoader classLoader)
  { 
    registerLazy(context, compiledContext, classLoader, context.getVarScope());
  }

  private void register(org.spoofax.interpreter.core.IContext context, Context compiledContext, org.spoofax.interpreter.core.VarScope varScope)
  { 
    compiledContext.registerComponent("trans");
    trans.init(compiledContext);
    varScope.addSVar("analyze_0_0", new InteropSDefT(analyze_0_0.instance, context));
    varScope.addSVar("declare_top_0_0", new InteropSDefT(declare_top_0_0.instance, context));
    varScope.addSVar("parse_file_0_0", new InteropSDefT(parse_file_0_0.instance, context));
    varScope.addSVar("parse_templatelang_file_0_0", new InteropSDefT(parse_templatelang_file_0_0.instance, context));
    varScope.addSVar("parse_string_0_0", new InteropSDefT(parse_string_0_0.instance, context));
    varScope.addSVar("parse_templatelang_string_0_0", new InteropSDefT(parse_templatelang_string_0_0.instance, context));
    varScope.addSVar("parse_stream_0_0", new InteropSDefT(parse_stream_0_0.instance, context));
    varScope.addSVar("parse_templatelang_stream_0_0", new InteropSDefT(parse_templatelang_stream_0_0.instance, context));
    varScope.addSVar("pp_templatelang_string_0_0", new InteropSDefT(pp_templatelang_string_0_0.instance, context));
    varScope.addSVar("language_0_0", new InteropSDefT(language_0_0.instance, context));
    varScope.addSVar("open_import_3_0", new InteropSDefT(open_import_3_0.instance, context));
    varScope.addSVar("open_wildcard_import_4_0", new InteropSDefT(open_wildcard_import_4_0.instance, context));
    varScope.addSVar("import_cache_path_0_0", new InteropSDefT(import_cache_path_0_0.instance, context));
    varScope.addSVar("project_path_0_0", new InteropSDefT(project_path_0_0.instance, context));
    varScope.addSVar("plugin_path_0_0", new InteropSDefT(plugin_path_0_0.instance, context));
    varScope.addSVar("candidate_sorts_0_0", new InteropSDefT(candidate_sorts_0_0.instance, context));
    varScope.addSVar("is_newer_0_0", new InteropSDefT(is_newer_0_0.instance, context));
    varScope.addSVar("editor_init_0_0", new InteropSDefT(editor_init_0_0.instance, context));
    varScope.addSVar("refresh_workspace_file_0_0", new InteropSDefT(refresh_workspace_file_0_0.instance, context));
    varScope.addSVar("string_starts_with_capital_0_0", new InteropSDefT(string_starts_with_capital_0_0.instance, context));
    varScope.addSVar("origin_term_0_0", new InteropSDefT(origin_term_0_0.instance, context));
    varScope.addSVar("origin_text_0_0", new InteropSDefT(origin_text_0_0.instance, context));
    varScope.addSVar("origin_offset_0_0", new InteropSDefT(origin_offset_0_0.instance, context));
    varScope.addSVar("origin_location_0_0", new InteropSDefT(origin_location_0_0.instance, context));
    varScope.addSVar("origin_line_0_0", new InteropSDefT(origin_line_0_0.instance, context));
    varScope.addSVar("origin_column_0_0", new InteropSDefT(origin_column_0_0.instance, context));
    varScope.addSVar("origin_file_0_0", new InteropSDefT(origin_file_0_0.instance, context));
    varScope.addSVar("origin_strip_0_0", new InteropSDefT(origin_strip_0_0.instance, context));
    varScope.addSVar("origin_equal_0_1", new InteropSDefT(origin_equal_0_1.instance, context));
    varScope.addSVar("origin_language_0_0", new InteropSDefT(origin_language_0_0.instance, context));
    varScope.addSVar("origin_surrounding_comments_0_0", new InteropSDefT(origin_surrounding_comments_0_0.instance, context));
    varScope.addSVar("origin_documentation_comment_0_0", new InteropSDefT(origin_documentation_comment_0_0.instance, context));
    varScope.addSVar("documentation_comment_chars_0_0", new InteropSDefT(documentation_comment_chars_0_0.instance, context));
    varScope.addSVar("origin_track_forced_1_0", new InteropSDefT(origin_track_forced_1_0.instance, context));
    varScope.addSVar("desugar_position_1_1", new InteropSDefT(desugar_position_1_1.instance, context));
    varScope.addSVar("at_position_1_1", new InteropSDefT(at_position_1_1.instance, context));
    varScope.addSVar("position_of_term_1_0", new InteropSDefT(position_of_term_1_0.instance, context));
    varScope.addSVar("position_of_term_1_1", new InteropSDefT(position_of_term_1_1.instance, context));
    varScope.addSVar("term_at_position_0_1", new InteropSDefT(term_at_position_0_1.instance, context));
    varScope.addSVar("parent_at_position_0_1", new InteropSDefT(parent_at_position_0_1.instance, context));
    varScope.addSVar("subterm_at_0_1", new InteropSDefT(subterm_at_0_1.instance, context));
    varScope.addSVar("set_markers_0_1", new InteropSDefT(set_markers_0_1.instance, context));
    varScope.addSVar("queue_analysis_0_0", new InteropSDefT(queue_analysis_0_0.instance, context));
    varScope.addSVar("analysis_count_0_0", new InteropSDefT(analysis_count_0_0.instance, context));
    varScope.addSVar("set_total_work_units_0_0", new InteropSDefT(set_total_work_units_0_0.instance, context));
    varScope.addSVar("complete_work_unit_0_0", new InteropSDefT(complete_work_unit_0_0.instance, context));
    varScope.addSVar("queue_strategy_0_2", new InteropSDefT(queue_strategy_0_2.instance, context));
    varScope.addSVar("set_analysis_backgrounded_0_0", new InteropSDefT(set_analysis_backgrounded_0_0.instance, context));
    varScope.addSVar("editor_analyze_0_0", new InteropSDefT(editor_analyze_0_0.instance, context));
    varScope.addSVar("generate_aterm_1_0", new InteropSDefT(generate_aterm_1_0.instance, context));
    varScope.addSVar("generate_aterm_0_0", new InteropSDefT(generate_aterm_0_0.instance, context));
    varScope.addSVar("generate_desugared_aterm_0_0", new InteropSDefT(generate_desugared_aterm_0_0.instance, context));
    varScope.addSVar("collect_sections_0_0", new InteropSDefT(collect_sections_0_0.instance, context));
    varScope.addSVar("collect_sections_1_0_0", new InteropSDefT(collect_sections_1_0_0.instance, context));
    varScope.addSVar("collect_sections_2_0_0", new InteropSDefT(collect_sections_2_0_0.instance, context));
    varScope.addSVar("generate_expanded_0_0", new InteropSDefT(generate_expanded_0_0.instance, context));
    varScope.addSVar("generate_esv_0_0", new InteropSDefT(generate_esv_0_0.instance, context));
    varScope.addSVar("generate_esv_abstract_0_0", new InteropSDefT(generate_esv_abstract_0_0.instance, context));
    varScope.addSVar("generate_esv_concrete_0_0", new InteropSDefT(generate_esv_concrete_0_0.instance, context));
    varScope.addSVar("generate_sdf_0_1", new InteropSDefT(generate_sdf_0_1.instance, context));
    varScope.addSVar("generate_sdf_abstract_0_0", new InteropSDefT(generate_sdf_abstract_0_0.instance, context));
    varScope.addSVar("generate_sdf_concrete_0_0", new InteropSDefT(generate_sdf_concrete_0_0.instance, context));
    varScope.addSVar("generate_box_pp_0_0", new InteropSDefT(generate_box_pp_0_0.instance, context));
    varScope.addSVar("generate_box_pp_abstract_0_0", new InteropSDefT(generate_box_pp_abstract_0_0.instance, context));
    varScope.addSVar("generate_box_pp_concrete_0_0", new InteropSDefT(generate_box_pp_concrete_0_0.instance, context));
    varScope.addSVar("generate_signature_0_0", new InteropSDefT(generate_signature_0_0.instance, context));
    varScope.addSVar("generate_signature_abstract_0_0", new InteropSDefT(generate_signature_abstract_0_0.instance, context));
    varScope.addSVar("generate_signature_concrete_0_0", new InteropSDefT(generate_signature_concrete_0_0.instance, context));
    varScope.addSVar("generate_all_0_0", new InteropSDefT(generate_all_0_0.instance, context));
    varScope.addSVar("write_string_to_file_0_0", new InteropSDefT(write_string_to_file_0_0.instance, context));
    varScope.addSVar("COMPLETION_1_0", new InteropSDefT($C$O$M$P$L$E$T$I$O$N_1_0.instance, context));
    varScope.addSVar("NOCONTEXT_1_0", new InteropSDefT($N$O$C$O$N$T$E$X$T_1_0.instance, context));
    varScope.addSVar("MARKER_0_0", new InteropSDefT($M$A$R$K$E$R_0_0.instance, context));
    varScope.addSVar("True_0_0", new InteropSDefT($True_0_0.instance, context));
    varScope.addSVar("Entity_2_0", new InteropSDefT($Entity_2_0.instance, context));
    varScope.addSVar("Property_2_0", new InteropSDefT($Property_2_0.instance, context));
    varScope.addSVar("Type_1_0", new InteropSDefT($Type_1_0.instance, context));
    varScope.addSVar("Type_0_0", new InteropSDefT($Type_0_0.instance, context));
    varScope.addSVar("Property_0_0", new InteropSDefT($Property_0_0.instance, context));
    varScope.addSVar("innermost_scope_Declaration_1_0", new InteropSDefT(innermost_scope_$Declaration_1_0.instance, context));
    varScope.addSVar("DYNAMIC__CALLS_0_0", new InteropSDefT($D$Y$N$A$M$I$C__$C$A$L$L$S_0_0.instance, context));
    varScope.addSVar("undefine_Declaration_0_1", new InteropSDefT(undefine_$Declaration_0_1.instance, context));
    varScope.addSVar("throw_Declaration_1_1", new InteropSDefT(throw_$Declaration_1_1.instance, context));
    varScope.addSVar("continue_to_label_Declaration_0_1", new InteropSDefT(continue_to_label_$Declaration_0_1.instance, context));
    varScope.addSVar("continue_Declaration_0_0", new InteropSDefT(continue_$Declaration_0_0.instance, context));
    varScope.addSVar("break_bp_Declaration_0_0", new InteropSDefT(break_bp_$Declaration_0_0.instance, context));
    varScope.addSVar("break_to_label_Declaration_0_1", new InteropSDefT(break_to_label_$Declaration_0_1.instance, context));
    varScope.addSVar("break_Declaration_0_0", new InteropSDefT(break_$Declaration_0_0.instance, context));
    varScope.addSVar("all_keys_Declaration_0_0", new InteropSDefT(all_keys_$Declaration_0_0.instance, context));
    varScope.addSVar("bigfold_Declaration_1_0", new InteropSDefT(bigfold_$Declaration_1_0.instance, context));
    varScope.addSVar("fold_Declaration_1_0", new InteropSDefT(fold_$Declaration_1_0.instance, context));
    varScope.addSVar("bigchain_Declaration_0_0", new InteropSDefT(bigchain_$Declaration_0_0.instance, context));
    varScope.addSVar("chain_Declaration_0_0", new InteropSDefT(chain_$Declaration_0_0.instance, context));
    varScope.addSVar("bigbagof_Declaration_0_0", new InteropSDefT(bigbagof_$Declaration_0_0.instance, context));
    varScope.addSVar("once_Declaration_0_0", new InteropSDefT(once_$Declaration_0_0.instance, context));
    varScope.addSVar("reverse_bagof_Declaration_1_0", new InteropSDefT(reverse_bagof_$Declaration_1_0.instance, context));
    varScope.addSVar("bagof_Declaration_0_0", new InteropSDefT(bagof_$Declaration_0_0.instance, context));
    varScope.addSVar("Declaration_0_0", new InteropSDefT($Declaration_0_0.instance, context));
    varScope.addSVar("aux_Declaration_0_3", new InteropSDefT(aux_$Declaration_0_3.instance, context));
    varScope.addSVar("innermost_scope_CurrentFile_1_0", new InteropSDefT(innermost_scope_$Current$File_1_0.instance, context));
    varScope.addSVar("undefine_CurrentFile_0_1", new InteropSDefT(undefine_$Current$File_0_1.instance, context));
    varScope.addSVar("throw_CurrentFile_1_1", new InteropSDefT(throw_$Current$File_1_1.instance, context));
    varScope.addSVar("continue_to_label_CurrentFile_0_1", new InteropSDefT(continue_to_label_$Current$File_0_1.instance, context));
    varScope.addSVar("continue_CurrentFile_0_0", new InteropSDefT(continue_$Current$File_0_0.instance, context));
    varScope.addSVar("break_bp_CurrentFile_0_0", new InteropSDefT(break_bp_$Current$File_0_0.instance, context));
    varScope.addSVar("break_to_label_CurrentFile_0_1", new InteropSDefT(break_to_label_$Current$File_0_1.instance, context));
    varScope.addSVar("break_CurrentFile_0_0", new InteropSDefT(break_$Current$File_0_0.instance, context));
    varScope.addSVar("all_keys_CurrentFile_0_0", new InteropSDefT(all_keys_$Current$File_0_0.instance, context));
    varScope.addSVar("bigfold_CurrentFile_1_0", new InteropSDefT(bigfold_$Current$File_1_0.instance, context));
    varScope.addSVar("fold_CurrentFile_1_0", new InteropSDefT(fold_$Current$File_1_0.instance, context));
    varScope.addSVar("bigchain_CurrentFile_0_0", new InteropSDefT(bigchain_$Current$File_0_0.instance, context));
    varScope.addSVar("chain_CurrentFile_0_0", new InteropSDefT(chain_$Current$File_0_0.instance, context));
    varScope.addSVar("bigbagof_CurrentFile_0_0", new InteropSDefT(bigbagof_$Current$File_0_0.instance, context));
    varScope.addSVar("once_CurrentFile_0_0", new InteropSDefT(once_$Current$File_0_0.instance, context));
    varScope.addSVar("reverse_bagof_CurrentFile_1_0", new InteropSDefT(reverse_bagof_$Current$File_1_0.instance, context));
    varScope.addSVar("bagof_CurrentFile_0_0", new InteropSDefT(bagof_$Current$File_0_0.instance, context));
    varScope.addSVar("CurrentFile_0_0", new InteropSDefT($Current$File_0_0.instance, context));
    varScope.addSVar("aux_CurrentFile_0_1", new InteropSDefT(aux_$Current$File_0_1.instance, context));
    varScope.addSVar("innermost_scope_IsImported_1_0", new InteropSDefT(innermost_scope_$Is$Imported_1_0.instance, context));
    varScope.addSVar("undefine_IsImported_0_1", new InteropSDefT(undefine_$Is$Imported_0_1.instance, context));
    varScope.addSVar("throw_IsImported_1_1", new InteropSDefT(throw_$Is$Imported_1_1.instance, context));
    varScope.addSVar("continue_to_label_IsImported_0_1", new InteropSDefT(continue_to_label_$Is$Imported_0_1.instance, context));
    varScope.addSVar("continue_IsImported_0_0", new InteropSDefT(continue_$Is$Imported_0_0.instance, context));
    varScope.addSVar("break_bp_IsImported_0_0", new InteropSDefT(break_bp_$Is$Imported_0_0.instance, context));
    varScope.addSVar("break_to_label_IsImported_0_1", new InteropSDefT(break_to_label_$Is$Imported_0_1.instance, context));
    varScope.addSVar("break_IsImported_0_0", new InteropSDefT(break_$Is$Imported_0_0.instance, context));
    varScope.addSVar("all_keys_IsImported_0_0", new InteropSDefT(all_keys_$Is$Imported_0_0.instance, context));
    varScope.addSVar("bigfold_IsImported_1_0", new InteropSDefT(bigfold_$Is$Imported_1_0.instance, context));
    varScope.addSVar("fold_IsImported_1_0", new InteropSDefT(fold_$Is$Imported_1_0.instance, context));
    varScope.addSVar("bigchain_IsImported_0_0", new InteropSDefT(bigchain_$Is$Imported_0_0.instance, context));
    varScope.addSVar("chain_IsImported_0_0", new InteropSDefT(chain_$Is$Imported_0_0.instance, context));
    varScope.addSVar("bigbagof_IsImported_0_0", new InteropSDefT(bigbagof_$Is$Imported_0_0.instance, context));
    varScope.addSVar("once_IsImported_0_0", new InteropSDefT(once_$Is$Imported_0_0.instance, context));
    varScope.addSVar("reverse_bagof_IsImported_1_0", new InteropSDefT(reverse_bagof_$Is$Imported_1_0.instance, context));
    varScope.addSVar("bagof_IsImported_0_0", new InteropSDefT(bagof_$Is$Imported_0_0.instance, context));
    varScope.addSVar("IsImported_0_0", new InteropSDefT($Is$Imported_0_0.instance, context));
    varScope.addSVar("aux_IsImported_0_2", new InteropSDefT(aux_$Is$Imported_0_2.instance, context));
  }

  private void registerLazy(org.spoofax.interpreter.core.IContext context, Context compiledContext, ClassLoader classLoader, org.spoofax.interpreter.core.VarScope varScope)
  { 
    compiledContext.registerComponent("trans");
    trans.init(compiledContext);
    varScope.addSVar("analyze_0_0", new InteropSDefT(classLoader, "trans.analyze_0_0", context));
    varScope.addSVar("declare_top_0_0", new InteropSDefT(classLoader, "trans.declare_top_0_0", context));
    varScope.addSVar("parse_file_0_0", new InteropSDefT(classLoader, "trans.parse_file_0_0", context));
    varScope.addSVar("parse_templatelang_file_0_0", new InteropSDefT(classLoader, "trans.parse_templatelang_file_0_0", context));
    varScope.addSVar("parse_string_0_0", new InteropSDefT(classLoader, "trans.parse_string_0_0", context));
    varScope.addSVar("parse_templatelang_string_0_0", new InteropSDefT(classLoader, "trans.parse_templatelang_string_0_0", context));
    varScope.addSVar("parse_stream_0_0", new InteropSDefT(classLoader, "trans.parse_stream_0_0", context));
    varScope.addSVar("parse_templatelang_stream_0_0", new InteropSDefT(classLoader, "trans.parse_templatelang_stream_0_0", context));
    varScope.addSVar("pp_templatelang_string_0_0", new InteropSDefT(classLoader, "trans.pp_templatelang_string_0_0", context));
    varScope.addSVar("language_0_0", new InteropSDefT(classLoader, "trans.language_0_0", context));
    varScope.addSVar("open_import_3_0", new InteropSDefT(classLoader, "trans.open_import_3_0", context));
    varScope.addSVar("open_wildcard_import_4_0", new InteropSDefT(classLoader, "trans.open_wildcard_import_4_0", context));
    varScope.addSVar("import_cache_path_0_0", new InteropSDefT(classLoader, "trans.import_cache_path_0_0", context));
    varScope.addSVar("project_path_0_0", new InteropSDefT(classLoader, "trans.project_path_0_0", context));
    varScope.addSVar("plugin_path_0_0", new InteropSDefT(classLoader, "trans.plugin_path_0_0", context));
    varScope.addSVar("candidate_sorts_0_0", new InteropSDefT(classLoader, "trans.candidate_sorts_0_0", context));
    varScope.addSVar("is_newer_0_0", new InteropSDefT(classLoader, "trans.is_newer_0_0", context));
    varScope.addSVar("editor_init_0_0", new InteropSDefT(classLoader, "trans.editor_init_0_0", context));
    varScope.addSVar("refresh_workspace_file_0_0", new InteropSDefT(classLoader, "trans.refresh_workspace_file_0_0", context));
    varScope.addSVar("string_starts_with_capital_0_0", new InteropSDefT(classLoader, "trans.string_starts_with_capital_0_0", context));
    varScope.addSVar("origin_term_0_0", new InteropSDefT(classLoader, "trans.origin_term_0_0", context));
    varScope.addSVar("origin_text_0_0", new InteropSDefT(classLoader, "trans.origin_text_0_0", context));
    varScope.addSVar("origin_offset_0_0", new InteropSDefT(classLoader, "trans.origin_offset_0_0", context));
    varScope.addSVar("origin_location_0_0", new InteropSDefT(classLoader, "trans.origin_location_0_0", context));
    varScope.addSVar("origin_line_0_0", new InteropSDefT(classLoader, "trans.origin_line_0_0", context));
    varScope.addSVar("origin_column_0_0", new InteropSDefT(classLoader, "trans.origin_column_0_0", context));
    varScope.addSVar("origin_file_0_0", new InteropSDefT(classLoader, "trans.origin_file_0_0", context));
    varScope.addSVar("origin_strip_0_0", new InteropSDefT(classLoader, "trans.origin_strip_0_0", context));
    varScope.addSVar("origin_equal_0_1", new InteropSDefT(classLoader, "trans.origin_equal_0_1", context));
    varScope.addSVar("origin_language_0_0", new InteropSDefT(classLoader, "trans.origin_language_0_0", context));
    varScope.addSVar("origin_surrounding_comments_0_0", new InteropSDefT(classLoader, "trans.origin_surrounding_comments_0_0", context));
    varScope.addSVar("origin_documentation_comment_0_0", new InteropSDefT(classLoader, "trans.origin_documentation_comment_0_0", context));
    varScope.addSVar("documentation_comment_chars_0_0", new InteropSDefT(classLoader, "trans.documentation_comment_chars_0_0", context));
    varScope.addSVar("origin_track_forced_1_0", new InteropSDefT(classLoader, "trans.origin_track_forced_1_0", context));
    varScope.addSVar("desugar_position_1_1", new InteropSDefT(classLoader, "trans.desugar_position_1_1", context));
    varScope.addSVar("at_position_1_1", new InteropSDefT(classLoader, "trans.at_position_1_1", context));
    varScope.addSVar("position_of_term_1_0", new InteropSDefT(classLoader, "trans.position_of_term_1_0", context));
    varScope.addSVar("position_of_term_1_1", new InteropSDefT(classLoader, "trans.position_of_term_1_1", context));
    varScope.addSVar("term_at_position_0_1", new InteropSDefT(classLoader, "trans.term_at_position_0_1", context));
    varScope.addSVar("parent_at_position_0_1", new InteropSDefT(classLoader, "trans.parent_at_position_0_1", context));
    varScope.addSVar("subterm_at_0_1", new InteropSDefT(classLoader, "trans.subterm_at_0_1", context));
    varScope.addSVar("set_markers_0_1", new InteropSDefT(classLoader, "trans.set_markers_0_1", context));
    varScope.addSVar("queue_analysis_0_0", new InteropSDefT(classLoader, "trans.queue_analysis_0_0", context));
    varScope.addSVar("analysis_count_0_0", new InteropSDefT(classLoader, "trans.analysis_count_0_0", context));
    varScope.addSVar("set_total_work_units_0_0", new InteropSDefT(classLoader, "trans.set_total_work_units_0_0", context));
    varScope.addSVar("complete_work_unit_0_0", new InteropSDefT(classLoader, "trans.complete_work_unit_0_0", context));
    varScope.addSVar("queue_strategy_0_2", new InteropSDefT(classLoader, "trans.queue_strategy_0_2", context));
    varScope.addSVar("set_analysis_backgrounded_0_0", new InteropSDefT(classLoader, "trans.set_analysis_backgrounded_0_0", context));
    varScope.addSVar("editor_analyze_0_0", new InteropSDefT(classLoader, "trans.editor_analyze_0_0", context));
    varScope.addSVar("generate_aterm_1_0", new InteropSDefT(classLoader, "trans.generate_aterm_1_0", context));
    varScope.addSVar("generate_aterm_0_0", new InteropSDefT(classLoader, "trans.generate_aterm_0_0", context));
    varScope.addSVar("generate_desugared_aterm_0_0", new InteropSDefT(classLoader, "trans.generate_desugared_aterm_0_0", context));
    varScope.addSVar("collect_sections_0_0", new InteropSDefT(classLoader, "trans.collect_sections_0_0", context));
    varScope.addSVar("collect_sections_1_0_0", new InteropSDefT(classLoader, "trans.collect_sections_1_0_0", context));
    varScope.addSVar("collect_sections_2_0_0", new InteropSDefT(classLoader, "trans.collect_sections_2_0_0", context));
    varScope.addSVar("generate_expanded_0_0", new InteropSDefT(classLoader, "trans.generate_expanded_0_0", context));
    varScope.addSVar("generate_esv_0_0", new InteropSDefT(classLoader, "trans.generate_esv_0_0", context));
    varScope.addSVar("generate_esv_abstract_0_0", new InteropSDefT(classLoader, "trans.generate_esv_abstract_0_0", context));
    varScope.addSVar("generate_esv_concrete_0_0", new InteropSDefT(classLoader, "trans.generate_esv_concrete_0_0", context));
    varScope.addSVar("generate_sdf_0_1", new InteropSDefT(classLoader, "trans.generate_sdf_0_1", context));
    varScope.addSVar("generate_sdf_abstract_0_0", new InteropSDefT(classLoader, "trans.generate_sdf_abstract_0_0", context));
    varScope.addSVar("generate_sdf_concrete_0_0", new InteropSDefT(classLoader, "trans.generate_sdf_concrete_0_0", context));
    varScope.addSVar("generate_box_pp_0_0", new InteropSDefT(classLoader, "trans.generate_box_pp_0_0", context));
    varScope.addSVar("generate_box_pp_abstract_0_0", new InteropSDefT(classLoader, "trans.generate_box_pp_abstract_0_0", context));
    varScope.addSVar("generate_box_pp_concrete_0_0", new InteropSDefT(classLoader, "trans.generate_box_pp_concrete_0_0", context));
    varScope.addSVar("generate_signature_0_0", new InteropSDefT(classLoader, "trans.generate_signature_0_0", context));
    varScope.addSVar("generate_signature_abstract_0_0", new InteropSDefT(classLoader, "trans.generate_signature_abstract_0_0", context));
    varScope.addSVar("generate_signature_concrete_0_0", new InteropSDefT(classLoader, "trans.generate_signature_concrete_0_0", context));
    varScope.addSVar("generate_all_0_0", new InteropSDefT(classLoader, "trans.generate_all_0_0", context));
    varScope.addSVar("write_string_to_file_0_0", new InteropSDefT(classLoader, "trans.write_string_to_file_0_0", context));
    varScope.addSVar("COMPLETION_1_0", new InteropSDefT(classLoader, "trans.$C$O$M$P$L$E$T$I$O$N_1_0", context));
    varScope.addSVar("NOCONTEXT_1_0", new InteropSDefT(classLoader, "trans.$N$O$C$O$N$T$E$X$T_1_0", context));
    varScope.addSVar("MARKER_0_0", new InteropSDefT(classLoader, "trans.$M$A$R$K$E$R_0_0", context));
    varScope.addSVar("True_0_0", new InteropSDefT(classLoader, "trans.$True_0_0", context));
    varScope.addSVar("Entity_2_0", new InteropSDefT(classLoader, "trans.$Entity_2_0", context));
    varScope.addSVar("Property_2_0", new InteropSDefT(classLoader, "trans.$Property_2_0", context));
    varScope.addSVar("Type_1_0", new InteropSDefT(classLoader, "trans.$Type_1_0", context));
    varScope.addSVar("Type_0_0", new InteropSDefT(classLoader, "trans.$Type_0_0", context));
    varScope.addSVar("Property_0_0", new InteropSDefT(classLoader, "trans.$Property_0_0", context));
    varScope.addSVar("innermost_scope_Declaration_1_0", new InteropSDefT(classLoader, "trans.innermost_scope_$Declaration_1_0", context));
    varScope.addSVar("DYNAMIC__CALLS_0_0", new InteropSDefT(classLoader, "trans.$D$Y$N$A$M$I$C__$C$A$L$L$S_0_0", context));
    varScope.addSVar("undefine_Declaration_0_1", new InteropSDefT(classLoader, "trans.undefine_$Declaration_0_1", context));
    varScope.addSVar("throw_Declaration_1_1", new InteropSDefT(classLoader, "trans.throw_$Declaration_1_1", context));
    varScope.addSVar("continue_to_label_Declaration_0_1", new InteropSDefT(classLoader, "trans.continue_to_label_$Declaration_0_1", context));
    varScope.addSVar("continue_Declaration_0_0", new InteropSDefT(classLoader, "trans.continue_$Declaration_0_0", context));
    varScope.addSVar("break_bp_Declaration_0_0", new InteropSDefT(classLoader, "trans.break_bp_$Declaration_0_0", context));
    varScope.addSVar("break_to_label_Declaration_0_1", new InteropSDefT(classLoader, "trans.break_to_label_$Declaration_0_1", context));
    varScope.addSVar("break_Declaration_0_0", new InteropSDefT(classLoader, "trans.break_$Declaration_0_0", context));
    varScope.addSVar("all_keys_Declaration_0_0", new InteropSDefT(classLoader, "trans.all_keys_$Declaration_0_0", context));
    varScope.addSVar("bigfold_Declaration_1_0", new InteropSDefT(classLoader, "trans.bigfold_$Declaration_1_0", context));
    varScope.addSVar("fold_Declaration_1_0", new InteropSDefT(classLoader, "trans.fold_$Declaration_1_0", context));
    varScope.addSVar("bigchain_Declaration_0_0", new InteropSDefT(classLoader, "trans.bigchain_$Declaration_0_0", context));
    varScope.addSVar("chain_Declaration_0_0", new InteropSDefT(classLoader, "trans.chain_$Declaration_0_0", context));
    varScope.addSVar("bigbagof_Declaration_0_0", new InteropSDefT(classLoader, "trans.bigbagof_$Declaration_0_0", context));
    varScope.addSVar("once_Declaration_0_0", new InteropSDefT(classLoader, "trans.once_$Declaration_0_0", context));
    varScope.addSVar("reverse_bagof_Declaration_1_0", new InteropSDefT(classLoader, "trans.reverse_bagof_$Declaration_1_0", context));
    varScope.addSVar("bagof_Declaration_0_0", new InteropSDefT(classLoader, "trans.bagof_$Declaration_0_0", context));
    varScope.addSVar("Declaration_0_0", new InteropSDefT(classLoader, "trans.$Declaration_0_0", context));
    varScope.addSVar("aux_Declaration_0_3", new InteropSDefT(classLoader, "trans.aux_$Declaration_0_3", context));
    varScope.addSVar("innermost_scope_CurrentFile_1_0", new InteropSDefT(classLoader, "trans.innermost_scope_$Current$File_1_0", context));
    varScope.addSVar("undefine_CurrentFile_0_1", new InteropSDefT(classLoader, "trans.undefine_$Current$File_0_1", context));
    varScope.addSVar("throw_CurrentFile_1_1", new InteropSDefT(classLoader, "trans.throw_$Current$File_1_1", context));
    varScope.addSVar("continue_to_label_CurrentFile_0_1", new InteropSDefT(classLoader, "trans.continue_to_label_$Current$File_0_1", context));
    varScope.addSVar("continue_CurrentFile_0_0", new InteropSDefT(classLoader, "trans.continue_$Current$File_0_0", context));
    varScope.addSVar("break_bp_CurrentFile_0_0", new InteropSDefT(classLoader, "trans.break_bp_$Current$File_0_0", context));
    varScope.addSVar("break_to_label_CurrentFile_0_1", new InteropSDefT(classLoader, "trans.break_to_label_$Current$File_0_1", context));
    varScope.addSVar("break_CurrentFile_0_0", new InteropSDefT(classLoader, "trans.break_$Current$File_0_0", context));
    varScope.addSVar("all_keys_CurrentFile_0_0", new InteropSDefT(classLoader, "trans.all_keys_$Current$File_0_0", context));
    varScope.addSVar("bigfold_CurrentFile_1_0", new InteropSDefT(classLoader, "trans.bigfold_$Current$File_1_0", context));
    varScope.addSVar("fold_CurrentFile_1_0", new InteropSDefT(classLoader, "trans.fold_$Current$File_1_0", context));
    varScope.addSVar("bigchain_CurrentFile_0_0", new InteropSDefT(classLoader, "trans.bigchain_$Current$File_0_0", context));
    varScope.addSVar("chain_CurrentFile_0_0", new InteropSDefT(classLoader, "trans.chain_$Current$File_0_0", context));
    varScope.addSVar("bigbagof_CurrentFile_0_0", new InteropSDefT(classLoader, "trans.bigbagof_$Current$File_0_0", context));
    varScope.addSVar("once_CurrentFile_0_0", new InteropSDefT(classLoader, "trans.once_$Current$File_0_0", context));
    varScope.addSVar("reverse_bagof_CurrentFile_1_0", new InteropSDefT(classLoader, "trans.reverse_bagof_$Current$File_1_0", context));
    varScope.addSVar("bagof_CurrentFile_0_0", new InteropSDefT(classLoader, "trans.bagof_$Current$File_0_0", context));
    varScope.addSVar("CurrentFile_0_0", new InteropSDefT(classLoader, "trans.$Current$File_0_0", context));
    varScope.addSVar("aux_CurrentFile_0_1", new InteropSDefT(classLoader, "trans.aux_$Current$File_0_1", context));
    varScope.addSVar("innermost_scope_IsImported_1_0", new InteropSDefT(classLoader, "trans.innermost_scope_$Is$Imported_1_0", context));
    varScope.addSVar("undefine_IsImported_0_1", new InteropSDefT(classLoader, "trans.undefine_$Is$Imported_0_1", context));
    varScope.addSVar("throw_IsImported_1_1", new InteropSDefT(classLoader, "trans.throw_$Is$Imported_1_1", context));
    varScope.addSVar("continue_to_label_IsImported_0_1", new InteropSDefT(classLoader, "trans.continue_to_label_$Is$Imported_0_1", context));
    varScope.addSVar("continue_IsImported_0_0", new InteropSDefT(classLoader, "trans.continue_$Is$Imported_0_0", context));
    varScope.addSVar("break_bp_IsImported_0_0", new InteropSDefT(classLoader, "trans.break_bp_$Is$Imported_0_0", context));
    varScope.addSVar("break_to_label_IsImported_0_1", new InteropSDefT(classLoader, "trans.break_to_label_$Is$Imported_0_1", context));
    varScope.addSVar("break_IsImported_0_0", new InteropSDefT(classLoader, "trans.break_$Is$Imported_0_0", context));
    varScope.addSVar("all_keys_IsImported_0_0", new InteropSDefT(classLoader, "trans.all_keys_$Is$Imported_0_0", context));
    varScope.addSVar("bigfold_IsImported_1_0", new InteropSDefT(classLoader, "trans.bigfold_$Is$Imported_1_0", context));
    varScope.addSVar("fold_IsImported_1_0", new InteropSDefT(classLoader, "trans.fold_$Is$Imported_1_0", context));
    varScope.addSVar("bigchain_IsImported_0_0", new InteropSDefT(classLoader, "trans.bigchain_$Is$Imported_0_0", context));
    varScope.addSVar("chain_IsImported_0_0", new InteropSDefT(classLoader, "trans.chain_$Is$Imported_0_0", context));
    varScope.addSVar("bigbagof_IsImported_0_0", new InteropSDefT(classLoader, "trans.bigbagof_$Is$Imported_0_0", context));
    varScope.addSVar("once_IsImported_0_0", new InteropSDefT(classLoader, "trans.once_$Is$Imported_0_0", context));
    varScope.addSVar("reverse_bagof_IsImported_1_0", new InteropSDefT(classLoader, "trans.reverse_bagof_$Is$Imported_1_0", context));
    varScope.addSVar("bagof_IsImported_0_0", new InteropSDefT(classLoader, "trans.bagof_$Is$Imported_0_0", context));
    varScope.addSVar("IsImported_0_0", new InteropSDefT(classLoader, "trans.$Is$Imported_0_0", context));
    varScope.addSVar("aux_IsImported_0_2", new InteropSDefT(classLoader, "trans.aux_$Is$Imported_0_2", context));
  }
}