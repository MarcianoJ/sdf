definition

module renaming/Renaming
imports kernel/Kernel symbols/Symbols

exports
  sorts WATER WATERTOKEN WATERTOKENSTART WATERTOKENSEPARATOR WATERTOKENSTAR

  lexical syntax
    [A-Za-z0-9\_]                  -> WATERTOKENSTART       {recover, avoid}
    WATERTOKENSTART [A-Za-z0-9\_]* -> WATERTOKEN            
    ~[A-Za-z0-9\_\ \t\12\r\n\*]    -> WATERTOKENSEPARATOR   {recover, avoid}
    "*"                            -> WATERTOKENSTAR        {recover, avoid}
    WATERTOKEN                     -> WATER                 
    WATERTOKENSEPARATOR            -> WATER                 
    WATERTOKENSTAR                 -> WATER                 
                                   -> WATEREOF              
    "completion123"                -> COMPLETIONPREFIX      {completion}
    "|#WATERTOKENSTAR|"            -> WATERTOKENSTAR        {completion}
    "|#Renamings|"                 -> Renamings             {completion}
    "|#Renaming|"                  -> Renaming              {completion}
    "|#ModuleId|"                  -> ModuleId              {completion}
    "|#Module|"                    -> Module                {completion}
    "|#ImpSection|"                -> ImpSection            {completion}
    "|#Import|"                    -> Import                {completion}
    "|#Associativity|"             -> Associativity         {completion}
    "|#ArgumentIndicator|"         -> ArgumentIndicator     {completion}
    "|#Lookahead|"                 -> Lookahead             {completion}
    "|#Lookaheads|"                -> Lookaheads            {completion}
    "|#Restriction|"               -> Restriction           {completion}
    "|#OptExp|"                    -> OptExp                {completion}
    "|#RealCon|"                   -> RealCon               {completion}
    "|#ATerm|"                     -> ATerm                 {completion}
    "|#Annotation|"                -> Annotation            {completion}
    "|#Attributes|"                -> Attributes            {completion}
    "|#Attribute|"                 -> Attribute             {completion}
    "|#SymbolDef|"                 -> SymbolDef             {completion}
    "|#StrChar|"                   -> StrChar               {completion}
    "|#Character|"                 -> Character             {completion}
    "|#Alias|"                     -> Alias                 {completion}
    "|#SingleQuotedStrChar|"       -> SingleQuotedStrChar   {completion}
    "|#Production|"                -> Production            {completion}
    "|#CharRange|"                 -> CharRange             {completion}
    "|#CharRanges|"                -> CharRanges            {completion}
    "|#CharClass|"                 -> CharClass             {completion}
    "|#IntCon|"                    -> IntCon                {completion}
    "|#SortSymbol|"                -> SortSymbol            {completion}
    "|#Symbol|"                    -> Symbol                {completion}
    "|#Sort|"                      -> Sort                  {completion}
    "|#ModuleName|"                -> ModuleName            {completion}
    "|#Symbols|"                   -> Symbols               {completion}
    "|#ATermAttribute|"            -> ATermAttribute        {completion}
    "|#NewlineOptionValue|"        -> NewlineOptionValue    {completion}
    "|#TemplateOption|"            -> TemplateOption        {completion}
    "|#Group|"                     -> Group                 {completion}
    "|#SortConsRef|"               -> SortConsRef           {completion}
    "|#Section|"                   -> Section               {completion}
    "|#Grammar|"                   -> Grammar               {completion}
    "|#SdfProduction|"             -> SdfProduction         {completion}
    "|#TemplateProduction|"        -> TemplateProduction    {completion}
    "|#SortCons|"                  -> SortCons              {completion}
    "|#TemplatePart1|"             -> TemplatePart1         {completion}
    "|#TemplatePart2|"             -> TemplatePart2         {completion}
    "|#PlaceholderOptions|"        -> PlaceholderOptions    {completion}
    "|#PlaceholderOption|"         -> PlaceholderOption     {completion}
    "|#Template|"                  -> Template              {completion}
    "|#CONTENTCOMPLETE|"           -> CONTENTCOMPLETE       {completion}
    "|#EscapedBackslashChar1|"     -> EscapedBackslashChar1 {completion}
    "|#EscapedBackslashChar2|"     -> EscapedBackslashChar2 {completion}
    "|#TemplateEscapeQAlt|"        -> TemplateEscapeQAlt    {completion}
    "|#EscapedUnicodeChar|"        -> EscapedUnicodeChar    {completion}
    "|#EscapedChar|"               -> EscapedChar           {completion}
    "|#EscapedChar1|"              -> EscapedChar1          {completion}
    "|#EscapedChar2|"              -> EscapedChar2          {completion}

  lexical restrictions
    WATERTOKEN -/- [A-Za-z0-9\_]
    WATERTOKENSTAR -/- [\/]

  context-free syntax
    WATER -> LAYOUT {cons("WATER")}

  (

  sorts WATEREOF

  lexical restrictions
    WATEREOF -/- ~[]

  lexical syntax
    %% Lexical insertion recovery rules                            
                                                -> "module"        {recover, cons("INSERTION")}
                                                -> "id"            {recover, cons("INSERTION")}
                                                -> "]]"            {recover, cons("INSERTION")}
                                                -> "e"             {recover, cons("INSERTION")}
                                                -> "."             {recover, cons("INSERTION")}
                                                -> "cons"          {recover, cons("INSERTION")}
    "%"                                         -> INSERTOPENQUOTE {recover}
    INSERTOPENQUOTE content:~[\%\n\r]+ "\n"     -> LAYOUT          {cons("INSERTEND")}
    INSERTOPENQUOTE content:~[\%\n\r]+ WATEREOF -> LAYOUT          {cons("INSERTEND")}
    "%"                                         -> INSERTSTART     {recover}
    INSERTSTART content:~[\%\n\r]+ WATEREOF     -> LAYOUT          {cons("INSERTEND")}
    "/*"                                        -> INSERTSTART     {recover}
    INSERTSTART LayoutCommentAlt* WATEREOF      -> LAYOUT          {cons("INSERTEND")}
                                                -> "TOP"           {recover, cons("INSERTION")}
                                                -> "EOF"           {recover, cons("INSERTION")}
                                                -> "BOT"           {recover, cons("INSERTION")}
                                                -> "LABEL_START"   {recover, cons("INSERTION")}
                                                -> ")"             {recover, cons("INSERTION")}
                                                -> "`"             {recover, cons("INSERTION")}
                                                -> "+"             {recover, cons("INSERTION")}
                                                -> "-"             {recover, cons("INSERTION")}
                                                -> "}+"            {recover, cons("INSERTION")}
                                                -> "}*"            {recover, cons("INSERTION")}
                                                -> "newlines"      {recover, cons("INSERTION")}
                                                -> "keyword"       {recover, cons("INSERTION")}
                                                -> "tokenize"      {recover, cons("INSERTION")}
                                                -> "}"             {recover, cons("INSERTION")}
                                                -> ">"             {recover, cons("INSERTION")}
                                                -> "]"             {recover, cons("INSERTION")}
                                                -> ";"             {recover, cons("INSERTION")}
                                                -> ","             {recover, cons("INSERTION")}
                                                -> "separator"     {recover, cons("INSERTION")}
                                                -> "text"          {recover, cons("INSERTION")}

  syntax
    %% Kernel syntax insertion recovery rules   

  )

  (

  context-free syntax
    "[" list:Renaming* "]"                          -> Renamings {cons("Renamings")}
    from:Symbol "=" ">" to:Symbol                   -> Renaming  {cons("Symbol")}
    from-prod:Production "=" ">" to-prod:Production -> Renaming  {cons("Production")}

  context-free syntax
    CONTENTCOMPLETE -> Renamings {cons("COMPLETION-Renamings")}
    CONTENTCOMPLETE -> Renaming  {cons("COMPLETION-Renaming")}

  )

module modules/Modules
imports kernel/Kernel renaming/Renaming symbols/Symbols

exports
  lexical syntax
    [A-Za-z0-9\_\-]+        -> ModuleWord {cons("Word")}
    ModuleWord              -> ModuleId   {cons("Leaf")}
    "/" ModuleId            -> ModuleId   {cons("Root")}
    ModuleWord "/" ModuleId -> ModuleId   {cons("Path")}

  context-free syntax
    "module" ModuleName list:ImpSection* Sections -> Module     {cons("Module")}
    Section*                                      -> Sections   
    Grammar                                       -> Section    {cons("SDFSection")}
    ModuleId                                      -> ModuleName {cons("Unparameterized")}
    ModuleId "[" params:Symbols "]"               -> ModuleName {cons("Parameterized")}
    "id" "(" ModuleName ")"                       -> Attribute  {cons("Id")}
    "imports" list:Imports                        -> ImpSection {cons("Imports")}
    list:Import*                                  -> Imports    
    ModuleName                                    -> Import     {cons("Module")}
    "(" Import ")"                                -> Import     {bracket}

  context-free syntax
    CONTENTCOMPLETE -> Module     {cons("COMPLETION-Module")}
    CONTENTCOMPLETE -> Sections   {cons("COMPLETION-Sections")}
    CONTENTCOMPLETE -> Section    {cons("COMPLETION-Section")}
    CONTENTCOMPLETE -> ModuleName {cons("COMPLETION-ModuleName")}
    CONTENTCOMPLETE -> Attribute  {cons("COMPLETION-Attribute")}
    CONTENTCOMPLETE -> ImpSection {cons("COMPLETION-ImpSection")}
    CONTENTCOMPLETE -> Imports    {cons("COMPLETION-Imports")}
    CONTENTCOMPLETE -> Import     {cons("COMPLETION-Import")}

  lexical restrictions
    ModuleWord -/- [A-Za-z0-9\_\-]
    ModuleId -/- [\/]

module basic/Basic
imports kernel/Kernel sorts/Sorts TemplateLang

exports
  context-free syntax
    "lexical" "syntax" Productions       -> Grammar {cons("Lexical")}
    "context-free" "syntax" Productions  -> Grammar {cons("Contextfree")}
    "variables" Productions              -> Grammar {cons("Variables")}
    "variables" SdfProduction*           -> Grammar {cons("VariablesProductive"), prefer}
    "lexical" "variables" Productions    -> Grammar {cons("LexVariables")}
    "lexical" "variables" SdfProduction* -> Grammar {cons("LexVariablesProductive"), prefer}
    Symbol "-CF"                         -> Symbol  {cons("Cf")}
    Symbol "-LEX"                        -> Symbol  {cons("Lex")}
    Symbol "-VAR"                        -> Symbol  {cons("Varsym")}
    "LAYOUT"                             -> Symbol  {cons("Layout")}

  context-free syntax
    CONTENTCOMPLETE -> Grammar {cons("COMPLETION-Grammar")}
    CONTENTCOMPLETE -> Symbol  {cons("COMPLETION-Symbol")}

  lexical syntax
    Sort "-LEX"     -> Sort {reject}
    Sort "-CF"      -> Sort {reject}
    Sort "-VAR"     -> Sort {reject}
    "LAYOUT" "-LEX" -> Sort {reject}
    "LAYOUT" "-CF"  -> Sort {reject}
    "LAYOUT" "-VAR" -> Sort {reject}

module TemplateLang
imports sdf2-core/SDF constants/StrCon sorts/Sorts symbols/Symbols labels/Labels
        constants/IdentifierCon kernel/Kernel restrictions/Restrictions
        priority/Priority basic/Basic modules/Modules

exports
  context-free start-symbols
    Module

  context-free syntax
    CONTENTCOMPLETE -> TemplateProduction {cons("WATER"), recover}
    CONTENTCOMPLETE -> PlaceholderOption  {cons("WATER"), recover}
    CONTENTCOMPLETE -> PlaceholderOptions {cons("WATER"), recover}

  context-free syntax
    CONTENTCOMPLETE -> TemplateProduction {cons("COMPLETION-TemplateProduction")}
    CONTENTCOMPLETE -> PlaceholderOption  {cons("COMPLETION-PlaceholderOption")}
    CONTENTCOMPLETE -> PlaceholderOptions {cons("COMPLETION-PlaceholderOptions")}

  context-free syntax
    "template" "options" TemplateOption* -> Section            {cons("TemplateOptions")}
    "newlines" ":" NewlineOptionValue    -> TemplateOption     {cons("Newlines")}
    "none"                               -> NewlineOptionValue {cons("None")}
    "leading"                            -> NewlineOptionValue {cons("Leading")}
    "trailing"                           -> NewlineOptionValue {cons("Trailing")}
    "separating"                         -> NewlineOptionValue {cons("Separating")}
    "keyword" "-/-" Lookaheads           -> TemplateOption     {cons("KeywordFollowRestriction")}
    "tokenize" ":" StrCon                -> TemplateOption     {cons("Tokenize")}

  context-free syntax
    CONTENTCOMPLETE -> Section            {cons("COMPLETION-Section")}
    CONTENTCOMPLETE -> NewlineOptionValue {cons("COMPLETION-NewlineOptionValue")}
    CONTENTCOMPLETE -> TemplateOption     {cons("COMPLETION-TemplateOption")}

  context-free syntax
    SortConsRef                            -> Group       {cons("SimpleRefGroup")}
    "{" SortConsRef+ "}"                   -> Group       {cons("ProdsRefGroup")}
    "{" Associativity ":" SortConsRef+ "}" -> Group       {cons("AssocRefGroup")}
    Symbol "." Constructor                 -> SortConsRef {cons("SortConsRef")}

  context-free syntax
    CONTENTCOMPLETE -> Group       {cons("COMPLETION-Group")}
    CONTENTCOMPLETE -> SortConsRef {cons("COMPLETION-SortConsRef")}

  context-free syntax
    "templates" TemplateProduction*            -> Section            {cons("TemplateSection"), deprecated("Use context-free syntax section instead")}
    "lexical" "syntax" SdfProduction*          -> Grammar            {cons("LexicalSyntax"), prefer}
    "context-free" "syntax" GeneralProduction* -> Grammar            {cons("ContextFreeSyntax"), prefer}
    "syntax" SdfProduction*                    -> Grammar            {cons("Kernel"), prefer}
    SdfProduction                              -> GeneralProduction  
    TemplateProduction                         -> GeneralProduction  {prefer}
    SymbolDef "=" RHS Attributes               -> SdfProduction      {cons("SdfProduction")}
    SortCons "=" RHS Attributes                -> SdfProduction      {cons("SdfProductionWithCons")}
    Symbols                                    -> RHS                {cons("Rhs")}
    SymbolDef "=" Template Attributes          -> TemplateProduction {cons("TemplateProduction")}
    SortCons "=" Template Attributes           -> TemplateProduction {cons("TemplateProductionWithCons")}
    IdCon                                      -> Constructor        {cons("Constructor")}
    SymbolDef "." Constructor                  -> SortCons           {cons("SortCons")}
    "<" Placeholder ">"                        -> TemplatePart1      {cons("Angled")}
    "[" Placeholder "]"                        -> TemplatePart2      {cons("Squared")}
    Symbol PlaceholderOptions                  -> Placeholder        {cons("Placeholder")}
                                               -> PlaceholderOptions {cons("NoOptions")}
    ";" {PlaceholderOption ","}+               -> PlaceholderOptions {cons("Options")}
    "hide"                                     -> PlaceholderOption  {cons("Hide")}
    "wrap"                                     -> PlaceholderOption  {cons("Wrap")}
    "anchor"                                   -> PlaceholderOption  {cons("Anchor")}
    "separator" "=" StrCon                     -> PlaceholderOption  {cons("Separator"), deprecated("Use list with separator symbol instead")}
    "text" "=" StrCon                          -> PlaceholderOption  {cons("Text")}

  context-free syntax
    CONTENTCOMPLETE -> Section            {cons("COMPLETION-Section")}
    CONTENTCOMPLETE -> Grammar            {cons("COMPLETION-Grammar")}
    CONTENTCOMPLETE -> GeneralProduction  {cons("COMPLETION-GeneralProduction")}
    CONTENTCOMPLETE -> SdfProduction      {cons("COMPLETION-SdfProduction")}
    CONTENTCOMPLETE -> RHS                {cons("COMPLETION-RHS")}
    CONTENTCOMPLETE -> TemplateProduction {cons("COMPLETION-TemplateProduction")}
    CONTENTCOMPLETE -> Constructor        {cons("COMPLETION-Constructor")}
    CONTENTCOMPLETE -> SortCons           {cons("COMPLETION-SortCons")}
    CONTENTCOMPLETE -> TemplatePart1      {cons("COMPLETION-TemplatePart1")}
    CONTENTCOMPLETE -> TemplatePart2      {cons("COMPLETION-TemplatePart2")}
    CONTENTCOMPLETE -> Placeholder        {cons("COMPLETION-Placeholder")}
    CONTENTCOMPLETE -> PlaceholderOptions {cons("COMPLETION-PlaceholderOptions")}
    CONTENTCOMPLETE -> PlaceholderOption  {cons("COMPLETION-PlaceholderOption")}

  syntax
    "<" {<TemplateLine1-CF> "\n"}+ ">"   -> <Template-CF>      {cons("Template")}
    "<<" {<TemplateLine1-CF> "\n"}+ ">>" -> <Template-CF>      {cons("TemplateDeprecated"), avoid, deprecated("Use single brackets to delimit the template")}
    <TemplatePart1-CF>*                  -> <TemplateLine1-CF> {cons("Line")}
    <TemplateString1-LEX>                -> <TemplatePart1-CF> {cons("String")}
    <TemplateEscape1-LEX>                -> <TemplatePart1-CF> {cons("Escape")}
    <TemplateLayout-LEX>                 -> <TemplatePart1-CF> {cons("Layout")}
    "[" {<TemplateLine2-CF> "\n"}+ "]"   -> <Template-CF>      {cons("TemplateSquare")}
    "[[" {<TemplateLine2-CF> "\n"}+ "]]" -> <Template-CF>      {cons("TemplateSquareDeprecated"), avoid, deprecated("Use single brackets to delimit the template")}
    <TemplatePart2-CF>*                  -> <TemplateLine2-CF> {cons("Line")}
    <TemplateString2-LEX>                -> <TemplatePart2-CF> {cons("String")}
    <TemplateEscape2-LEX>                -> <TemplatePart2-CF> {cons("Escape")}
    <TemplateLayout-LEX>                 -> <TemplatePart2-CF> {cons("Layout")}

  lexical syntax
    LF    -> EOL  
    CR    -> EOL  
    CR LF -> EOL  
    [\r]  -> CR   
    [\n]  -> LF   
    EOL   -> "\n" 

  lexical restrictions
    CR -/- [\n]

  lexical syntax
    [\ \t]+             -> TemplateLayout     
    TemplateString1Alt+ -> TemplateString1    
    TemplateString2Alt+ -> TemplateString2    
    ~[\\\"\ \t]+        -> TemplateStringQ    
    ~[\\\<\>\ \t\r\n]   -> TemplateString1Alt 
    ~[\\\[\]\ \t\r\n]   -> TemplateString2Alt 
    Backslash           -> TemplateString2Alt 
    [\\]                -> Backslash          

  lexical restrictions
    TemplateLayout -/- [\ \t]
    TemplateString1 -/- ~[\\\<\>\ \t\r\n]
    TemplateString2 -/- ~[\\\[\]\ \t\r\n]
    TemplateStringQ -/- ~[\\\"\ \t]
    TemplateString1 -/- [\\] . ~[\<\>\\]
    TemplateString2 -/- [\\] . ~[\[\]\\]
    Backslash -/- [\<\>\\]

  lexical syntax
    [a-zA-Z]* "CONTENTCOMPLETE" [0-9]+ -> CONTENTCOMPLETE       {avoid}
    EscapedChar1+                      -> TemplateEscape1       
    EscapedChar2+                      -> TemplateEscape2       
    "\\<"                              -> EscapedChar1          
    "\\>"                              -> EscapedChar1          
    "\\\\"                             -> EscapedChar1          
    "\\["                              -> EscapedChar2          
    "\\]"                              -> EscapedChar2          
    "\\\\"                             -> EscapedChar2          
    "<" EscapedChar1Alt* ">"           -> EscapedChar1          
    EscapedBackslashChar1              -> EscapedChar1Alt       
    EscapedChar                        -> EscapedChar1Alt       
    "<\\\\>" [\ \t\r]* [\n]            -> EscapedChar1          
    "[" EscapedChar2Alt* "]"           -> EscapedChar2          
    EscapedBackslashChar2              -> EscapedChar2Alt       
    EscapedChar                        -> EscapedChar2Alt       
    "[\\\\]" [\ \t\r]* [\n]            -> EscapedChar2          
    "\\\\"                             -> EscapedBackslashChar1 
    "\\\\"                             -> EscapedBackslashChar2 
    TemplateEscapeQAlt+                -> TemplateEscapeQ       
    EscapedChar                        -> TemplateEscapeQAlt    
    "\\\\"                             -> TemplateEscapeQAlt    
    "\\'"                              -> EscapedChar           
    '\\"'                              -> EscapedChar           
    "\\ "                              -> EscapedChar           
    "\\t"                              -> EscapedChar           
    "\\r"                              -> EscapedChar           
    "\\n"                              -> EscapedChar           
    "\\u" [0-9A-Fa-f]+                 -> EscapedUnicodeChar    
    EscapedUnicodeChar                 -> EscapedChar           
    "\\" ~[]                           -> EscapedChar           {cons("WATER"), recover}
    "<" ~[\>]+ ">"                     -> EscapedChar1          {cons("WATER"), recover}
    "[" ~[\]]+ "]"                     -> EscapedChar2          {cons("WATER"), recover}

  lexical restrictions
    TemplateEscape1 -/- [\\]
    TemplateEscape1 -/- [\<] . [\\\>]
    TemplateEscape2 -/- [\\]
    TemplateEscape2 -/- [\[] . [\\\]]
    TemplateEscapeQ -/- [\\]
    EscapedBackslashChar1 -/- [\>]
    EscapedBackslashChar2 -/- [\]]
    EscapedUnicodeChar -/- [0-9A-Fa-f]

module priority/Priority
imports kernel/Kernel constants/NatCon TemplateLang

exports
  context-free syntax
    "left"                                        -> Associativity       {cons("Left")}
    "right"                                       -> Associativity       {cons("Right")}
    "non-assoc"                                   -> Associativity       {cons("NonAssoc")}
    "assoc"                                       -> Associativity       {cons("Assoc")}
    "bracket"                                     -> Attribute           {cons("Bracket")}
    Associativity                                 -> Attribute           {cons("Assoc")}
    "<" arguments:{NatCon ","}+ ">"               -> ArgumentIndicator   {cons("Default")}
    Group ArgumentIndicator                       -> Group               {cons("WithArguments"), non-assoc}
    Group "."                                     -> Group               {cons("NonTransitive"), non-assoc}
    PriorityProduction                            -> Group               {cons("SimpleGroup")}
    "{" PriorityProductions "}"                   -> Group               {cons("ProdsGroup")}
    "{" Associativity ":" PriorityProductions "}" -> Group               {cons("AssocGroup")}
    SdfProduction                                 -> PriorityProduction  
    Production                                    -> PriorityProduction  
    list:PriorityProduction*                      -> PriorityProductions 
    list:{Group ">"}+                             -> Priority            {cons("Chain")}
    Group Associativity Group                     -> Priority            {cons("Assoc")}
    list:{Priority ","}*                          -> Priorities          
    "priorities" Priorities                       -> Grammar             {cons("Priorities")}

  context-free syntax
    CONTENTCOMPLETE -> Associativity       {cons("COMPLETION-Associativity")}
    CONTENTCOMPLETE -> Attribute           {cons("COMPLETION-Attribute")}
    CONTENTCOMPLETE -> ArgumentIndicator   {cons("COMPLETION-ArgumentIndicator")}
    CONTENTCOMPLETE -> Group               {cons("COMPLETION-Group")}
    CONTENTCOMPLETE -> PriorityProduction  {cons("COMPLETION-PriorityProduction")}
    CONTENTCOMPLETE -> PriorityProductions {cons("COMPLETION-PriorityProductions")}
    CONTENTCOMPLETE -> Priority            {cons("COMPLETION-Priority")}
    CONTENTCOMPLETE -> Priorities          {cons("COMPLETION-Priorities")}
    CONTENTCOMPLETE -> Grammar             {cons("COMPLETION-Grammar")}

module restrictions/Restrictions
imports characterclass/CC characterclass/Character-Class symbols/Symbols
        constants/StrCon

exports
  context-free syntax
    CharClass                           -> Lookahead          {cons("CharClass")}
    CharClass "." Lookaheads            -> Lookahead          {cons("Seq")}
    Lookahead                           -> Lookaheads         {cons("Single")}
    Lookaheads "|" Lookaheads           -> Lookaheads         {cons("Alt"), right}
    "(" Lookaheads ")"                  -> Lookaheads         {bracket}
    "[[" list:{Lookahead ","}* "]]"     -> Lookaheads         {cons("List")}
    RestrictionSymbols "-/-" Lookaheads -> Restriction        {cons("Follow")}
    list:Symbol*                        -> RestrictionSymbols 
    list:Restriction*                   -> Restrictions       
    "restrictions" Restrictions         -> Grammar            {cons("Restrictions")}
    "reject"                            -> Attribute          {cons("Reject")}
    "prefer"                            -> Attribute          {cons("Prefer")}
    "avoid"                             -> Attribute          {cons("Avoid")}

  context-free syntax
    CONTENTCOMPLETE -> Lookahead          {cons("COMPLETION-Lookahead")}
    CONTENTCOMPLETE -> Lookaheads         {cons("COMPLETION-Lookaheads")}
    CONTENTCOMPLETE -> Restriction        {cons("COMPLETION-Restriction")}
    CONTENTCOMPLETE -> RestrictionSymbols {cons("COMPLETION-RestrictionSymbols")}
    CONTENTCOMPLETE -> Restrictions       {cons("COMPLETION-Restrictions")}
    CONTENTCOMPLETE -> Grammar            {cons("COMPLETION-Grammar")}
    CONTENTCOMPLETE -> Attribute          {cons("COMPLETION-Attribute")}

  context-free priorities
    CharClass "." Lookaheads -> Lookahead >
    Lookaheads "|" Lookaheads -> Lookaheads

module grammar/Grammars
imports layout/Comments

exports
  context-free syntax
    "(" "/" ")"     -> Grammar {cons("Empty")}
    "(" Grammar ")" -> Grammar {bracket}

  context-free syntax
    CONTENTCOMPLETE -> Grammar {cons("COMPLETION-Grammar")}

module constants/RealCon
imports constants/IntCon constants/NatCon

exports
  context-free start-symbols
    RealCon

  context-free syntax
    "e" IntCon                                -> OptExp  {cons("Present")}
                                              -> OptExp  {cons("Absent")}
    base:IntCon "." decimal:NatCon exp:OptExp -> RealCon {cons("RealCon")}

  context-free syntax
    CONTENTCOMPLETE -> OptExp  {cons("COMPLETION-OptExp")}
    CONTENTCOMPLETE -> RealCon {cons("COMPLETION-RealCon")}

module aterms/Aterms
imports constants/IntCon constants/RealCon constants/StrCon
        constants/IdentifierCon

exports
  context-free start-symbols
    ATerm

  context-free syntax
    StrCon -> AFun {cons("Quoted")}
    IdCon  -> AFun {cons("Unquoted")}

  context-free syntax
    CONTENTCOMPLETE -> AFun {cons("COMPLETION-AFun")}

  context-free syntax
    IntCon                    -> ATerm {cons("Int")}
    RealCon                   -> ATerm {cons("Real")}
    AFun                      -> ATerm {cons("Fun")}
    AFun "(" {ATerm ","}+ ")" -> ATerm {cons("Appl")}
    "<" ATerm ">"             -> ATerm {cons("PlaceHolder")}
    "[" {ATerm ","}* "]"      -> ATerm {cons("List")}
    ATerm Annotation          -> ATerm {cons("Annotated")}

  context-free syntax
    CONTENTCOMPLETE -> ATerm {cons("COMPLETION-ATerm")}

  context-free syntax
    "{" {ATerm ","}+ "}" -> Annotation {cons("Default")}

  context-free syntax
    CONTENTCOMPLETE -> Annotation {cons("COMPLETION-Annotation")}

module kernel/Kernel
imports aterms/Aterms symbols/Symbols grammar/Grammars constants/StrCon

exports
  context-free syntax
    aterm:ATerm                              -> ATermAttribute    {cons("Default")}
    ATermAttribute                           -> Attribute         {cons("Term")}
    "{" list:{Attribute ","}* "}"            -> Attributes        {cons("Attrs")}
                                             -> Attributes        {cons("NoAttrs")}
    "deprecated"                             -> Attribute         {cons("Deprecated"), prefer}
    "deprecated" "(" StrCon ")"              -> Attribute         {cons("Deprecated"), prefer}
    "cons" "(" StrCon ")"                    -> Attribute         {cons("Constructor"), prefer, deprecated("Use 'Sort.Cons' notation instead")}
    QuotedConstructor                        -> Attribute         {prefer, deprecated("Use 'Sort.Cons' notation instead")}
    StrCon                                   -> QuotedConstructor {cons("Constructor")}
    Symbols "-" ">" result:Symbol Attributes -> Production        {cons("Prod"), deprecated("Use productive form instead")}
    list:Production*                         -> Productions       
    "syntax" Productions                     -> Grammar           {cons("Syntax")}

  context-free syntax
    CONTENTCOMPLETE -> ATermAttribute    {cons("COMPLETION-ATermAttribute")}
    CONTENTCOMPLETE -> Attributes        {cons("COMPLETION-Attributes")}
    CONTENTCOMPLETE -> Attribute         {cons("COMPLETION-Attribute")}
    CONTENTCOMPLETE -> QuotedConstructor {cons("COMPLETION-QuotedConstructor")}
    CONTENTCOMPLETE -> Production        {cons("COMPLETION-Production")}
    CONTENTCOMPLETE -> Productions       {cons("COMPLETION-Productions")}
    CONTENTCOMPLETE -> Grammar           {cons("COMPLETION-Grammar")}

module constants/IdentifierCon
exports
  lexical syntax
    [A-Za-z] [A-Za-z\-\_0-9]* -> IdCon {cons("Default")}

  lexical restrictions
    IdCon -/- [A-Za-z\-0-9]

module labels/Labels
imports kernel/Kernel constants/StrCon constants/IdentifierCon

exports
  context-free syntax
    StrCon           -> Label  {cons("Quoted")}
    IdCon            -> Label  {cons("Unquoted")}
    Label ":" Symbol -> Symbol {cons("Label")}

  context-free syntax
    CONTENTCOMPLETE -> Label  {cons("COMPLETION-Label")}
    CONTENTCOMPLETE -> Symbol {cons("COMPLETION-Symbol")}

module layout/Comments
imports layout/Whitespace

exports
  lexical syntax
    "%%" line:~[\n\r]* LayoutNewlineAlt -> LAYOUT           {category("Comment")}
    [\n\r]                              -> LayoutNewlineAlt 
    EOF                                 -> LayoutNewlineAlt 
    "%" content:~[\%\n\r]+ "%"          -> LAYOUT           {category("Comment")}
    "/*" LayoutCommentAlt* "*/"         -> LAYOUT           
    ~[\*]                               -> LayoutCommentAlt 
    CommentChar                         -> LayoutCommentAlt 
    [\*]                                -> CommentChar      
    "//" ~[\n\r]* LayoutNewlineAlt      -> LAYOUT           
                                        -> EOF              

  lexical restrictions
    CommentChar -/- [\/]
    EOF -/- ~[]

  context-free restrictions
    LAYOUT? -/- [\%]
    LAYOUT? -/- [\ \t\n\r]
    LAYOUT? -/- [\/] . [\/]
    LAYOUT? -/- [\/] . [\*]

module symbols/Symbols
imports layout/Comments

exports
  context-free syntax
    "(" Symbol ")" -> Symbol    {bracket}
    list:Symbol*   -> Symbols   
    Symbol         -> SymbolDef 

  context-free syntax
    CONTENTCOMPLETE -> Symbol    {cons("COMPLETION-Symbol")}
    CONTENTCOMPLETE -> Symbols   {cons("COMPLETION-Symbols")}
    CONTENTCOMPLETE -> SymbolDef {cons("COMPLETION-SymbolDef")}

module sorts/Sorts
imports kernel/Kernel symbols/Symbols

exports
  lexical syntax
    [A-Z]                            -> Sort {cons("OneChar")}
    [A-Z] [A-Za-z0-9\-]* [A-Za-z0-9] -> Sort {cons("MoreChars")}

  context-free syntax
    Sort                                    -> Symbol    {cons("Sort")}
    Sort "[[" parameters:{Symbol ","}+ "]]" -> Symbol    {cons("ParameterizedSort")}
    Sort                                    -> SymbolDef {cons("SortDef"), prefer}
    SymbolDef "-CF"                         -> SymbolDef {cons("Cf"), prefer}
    SymbolDef "-LEX"                        -> SymbolDef {cons("Lex"), prefer}
    SymbolDef "-VAR"                        -> SymbolDef {cons("Var"), prefer}
    "sorts" Symbols                         -> Grammar   {cons("Sorts")}

  context-free syntax
    CONTENTCOMPLETE -> Symbol    {cons("COMPLETION-Symbol")}
    CONTENTCOMPLETE -> SymbolDef {cons("COMPLETION-SymbolDef")}
    CONTENTCOMPLETE -> Grammar   {cons("COMPLETION-Grammar")}

  lexical restrictions
    Sort -/- [A-Za-z0-9]

module constants/StrCon
exports
  lexical syntax
    "\\n"                        -> StrChar {cons("Newline")}
    "\\t"                        -> StrChar {cons("Tab")}
    "\\\""                       -> StrChar {cons("Quote")}
    "\\\\"                       -> StrChar {cons("Backslash")}
    "\\" a:[0-9] b:[0-9] c:[0-9] -> StrChar {cons("Decimal")}
    ~[\0-\31\n\t\"\\]            -> StrChar {cons("Normal")}
    [\"] chars:StrChar* [\"]     -> StrCon  {cons("Default")}

module characterclass/Character
exports
  lexical syntax
    [\\] number:[0-9]+                    -> NumChar   {cons("Digits")}
    character:[a-zA-Z0-9]                 -> ShortChar {cons("Regular")}
    [\\] escape:~[\0-\31A-Za-mo-qsu-z0-9] -> ShortChar {cons("Escaped")}

  context-free syntax
    NumChar            -> Character {cons("Numeric")}
    ShortChar          -> Character {cons("Short")}
    "\\" "TOP"         -> Character {cons("Top")}
    "\\" "EOF"         -> Character {cons("Eof")}
    "\\" "BOT"         -> Character {cons("Bot")}
    "\\" "LABEL_START" -> Character {cons("LabelStart")}

  context-free syntax
    CONTENTCOMPLETE -> Character {cons("COMPLETION-Character")}

module constants/NatCon
exports
  lexical syntax
    [0-9]+ -> NatCon {cons("Digits")}

  lexical restrictions
    NatCon -/- [0-9]

module aliases/Aliases
imports kernel/Kernel symbols/Symbols

exports
  context-free syntax
    Symbols "-" ">" result:Symbol Attributes -> Production {cons("Prod"), incremental}

  context-free syntax
    CONTENTCOMPLETE -> Production {cons("COMPLETION-Production")}

  context-free syntax
    "aliases" Aliases           -> Grammar {cons("Aliases")}
    Symbol "-" ">" alias:Symbol -> Alias   {cons("Alias")}
    list:Alias*                 -> Aliases 

  context-free syntax
    CONTENTCOMPLETE -> Grammar {cons("COMPLETION-Grammar")}
    CONTENTCOMPLETE -> Alias   {cons("COMPLETION-Alias")}
    CONTENTCOMPLETE -> Aliases {cons("COMPLETION-Aliases")}

module literals/Literals
imports kernel/Kernel

imports constants/StrCon

imports constants/IdentifierCon

exports
  lexical syntax
    "\\n"                                -> SingleQuotedStrChar {cons("Newline")}
    "\\t"                                -> SingleQuotedStrChar {cons("Tab")}
    "\\'"                                -> SingleQuotedStrChar {cons("Quote")}
    "\\\\"                               -> SingleQuotedStrChar {cons("Backslash")}
    "\\" a:[0-9] b:[0-9] c:[0-9]         -> SingleQuotedStrChar {cons("Decimal")}
    ~[\0-\31\n\t\'\\]                    -> SingleQuotedStrChar {cons("Normal")}
    [\'] chars:SingleQuotedStrChar* [\'] -> SingleQuotedStrCon  {cons("Default")}

  context-free syntax
    IdCon  -> FunctionName {cons("UnquotedFun")}
    StrCon -> FunctionName {cons("QuotedFun")}

  context-free syntax
    CONTENTCOMPLETE -> FunctionName {cons("COMPLETION-FunctionName")}

  context-free syntax
    string:StrCon                                                                     -> Symbol     {cons("Lit")}
    ci-string:SingleQuotedStrCon                                                      -> Symbol     {cons("CiLit")}
    fun:FunctionName "(" arguments:{Symbol ","}* ")" "-" ">" result:Symbol Attributes -> Production {cons("PrefixFun")}

  context-free syntax
    CONTENTCOMPLETE -> Symbol     {cons("COMPLETION-Symbol")}
    CONTENTCOMPLETE -> Production {cons("COMPLETION-Production")}

module symbols/Start-Symbols
imports kernel/Kernel symbols/Symbols

exports
  context-free syntax
    "start-symbols" Symbols                -> Grammar {cons("KernelStartSymbols")}
    "lexical" "start-symbols" Symbols      -> Grammar {cons("LexicalStartSymbols")}
    "context-free" "start-symbols" Symbols -> Grammar {cons("ContextFreeStartSymbols")}

  context-free syntax
    CONTENTCOMPLETE -> Grammar {cons("COMPLETION-Grammar")}

module characterclass/Character-Class
imports characterclass/Character

exports
  context-free syntax
    Character                         -> CharRange     
    start:Character "-" end:Character -> CharRange     {cons("Range")}
    CharRange                         -> CharRanges    
    CharRanges CharRanges             -> CharRanges    {cons("Conc"), right, memo}
    "(" CharRanges ")"                -> CharRanges    {bracket}
                                      -> OptCharRanges {cons("Absent")}
    CharRanges                        -> OptCharRanges {cons("Present")}
    "[" OptCharRanges "]"             -> CharClass     {cons("Simple")}
    "~" CharClass                     -> CharClass     {cons("Comp")}
    CharClass "/" CharClass           -> CharClass     {cons("Diff"), left, memo}
    CharClass "/" "\\" CharClass      -> CharClass     {cons("Isect"), left, memo}
    CharClass "\\" "/" CharClass      -> CharClass     {cons("Union"), left}
    "(" CharClass ")"                 -> CharClass     {bracket, avoid}

  context-free syntax
    CONTENTCOMPLETE -> CharRange     {cons("COMPLETION-CharRange")}
    CONTENTCOMPLETE -> CharRanges    {cons("COMPLETION-CharRanges")}
    CONTENTCOMPLETE -> OptCharRanges {cons("COMPLETION-OptCharRanges")}
    CONTENTCOMPLETE -> CharClass     {cons("COMPLETION-CharClass")}

  context-free priorities
    "~" CharClass -> CharClass >
    CharClass "/" CharClass -> CharClass >
    CharClass "/" "\\" CharClass -> CharClass >
    CharClass "\\" "/" CharClass -> CharClass

module characterclass/CC
imports characterclass/Character-Class kernel/Kernel

exports
  context-free syntax
    CharClass -> Symbol {cons("CharClass")}

  context-free syntax
    CONTENTCOMPLETE -> Symbol {cons("COMPLETION-Symbol")}

module lifting/Lifting
imports kernel/Kernel

exports
  context-free syntax
    "`" Symbol "`" -> Symbol {cons("Lifting")}

  context-free syntax
    CONTENTCOMPLETE -> Symbol {cons("COMPLETION-Symbol")}

module layout/Whitespace
exports
  lexical syntax
    [\ \t\n\r] -> LAYOUT 

  context-free restrictions
    LAYOUT? -/- [\ \t\n\r]

module constants/IntCon
imports layout/Whitespace constants/NatCon

exports
  context-free start-symbols
    IntCon

  context-free syntax
    NatCon     -> IntCon {cons("Natural")}
    "+" NatCon -> IntCon {cons("Positive")}
    "-" NatCon -> IntCon {cons("Negative")}

  context-free syntax
    CONTENTCOMPLETE -> IntCon {cons("COMPLETION-IntCon")}

module regular/Regular
imports kernel/Kernel constants/IntCon symbols/Symbols constants/StrCon
        labels/Labels sorts/Sorts

exports
  context-free syntax
    Symbol "?"                        -> Symbol     {cons("Opt")}
    Symbol "+"                        -> Symbol     {cons("Iter")}
    Symbol "*"                        -> Symbol     {cons("IterStar")}
    "{" Symbol sep:Separator "}+"     -> Symbol     {cons("IterSep")}
    "{" Symbol sep:Separator "}*"     -> Symbol     {cons("IterStarSep")}
    Sort "?"                          -> SortSymbol {cons("Opt")}
    Sort "+"                          -> SortSymbol {cons("Iter")}
    Sort "*"                          -> SortSymbol {cons("IterStar")}
    "{" Sort sep:Separator "}+"       -> SortSymbol {cons("IterSep")}
    "{" Sort sep:Separator "}*"       -> SortSymbol {cons("IterStarSep")}
    StrCon                            -> Separator  {cons("Lit")}
    SortSymbol "?"                    -> Symbol     {reject}
    SortSymbol "+"                    -> Symbol     {reject}
    SortSymbol "*"                    -> Symbol     {reject}
    "{" SortSymbol sep:Separator "}+" -> Symbol     {reject}
    "{" SortSymbol sep:Separator "}*" -> Symbol     {reject}
    Symbol "|" Symbol                 -> Symbol     {cons("Alt"), right}

  context-free syntax
    CONTENTCOMPLETE -> SortSymbol {cons("COMPLETION-SortSymbol")}
    CONTENTCOMPLETE -> Separator  {cons("COMPLETION-Separator")}
    CONTENTCOMPLETE -> Symbol     {cons("COMPLETION-Symbol")}

  context-free priorities
    { Symbol "?" -> Symbol
      Symbol "*" -> Symbol
      Symbol "+" -> Symbol } >
    Symbol "|" Symbol -> Symbol >
    Label ":" Symbol -> Symbol

module sdf2-core/Sdf2-Syntax
imports kernel/Kernel basic/Basic modules/Modules regular/Regular
        lifting/Lifting priority/Priority characterclass/CC sorts/Sorts
        symbols/Start-Symbols literals/Literals labels/Labels
        restrictions/Restrictions aliases/Aliases

exports
  context-free syntax
    "<" "START" ">"                            -> Symbol  {cons("Start")}
    "<" "Start" ">"                            -> Symbol  {cons("FileStart")}
    "lexical" "priorities" Priorities          -> Grammar {cons("LexicalPriorities")}
    "context-free" "priorities" Priorities     -> Grammar {cons("ContextFreePriorities")}
    "lexical" "restrictions" Restrictions      -> Grammar {cons("LexicalRestrictions")}
    "context-free" "restrictions" Restrictions -> Grammar {cons("ContextFreeRestrictions")}

  context-free syntax
    CONTENTCOMPLETE -> Symbol  {cons("COMPLETION-Symbol")}
    CONTENTCOMPLETE -> Grammar {cons("COMPLETION-Grammar")}

module sdf2-core/Sdf2
imports sdf2-core/Sdf2-Syntax constants/StrCon constants/NatCon
        priority/Priority characterclass/Character modules/Modules

exports
  context-free start-symbols
    Module

  lexical syntax
    "LAYOUT" -> Sort {reject}

  context-free syntax
    "aliases"                              -> ModuleName     {reject}
    "lexical"                              -> ModuleName     {reject}
    "priorities"                           -> ModuleName     {reject}
    "context-free"                         -> ModuleName     {reject}
    "definition"                           -> ModuleName     {reject}
    "syntax"                               -> ModuleName     {reject}
    "variables"                            -> ModuleName     {reject}
    "module"                               -> ModuleName     {reject}
    "imports"                              -> ModuleName     {reject}
    "exports"                              -> ModuleName     {reject}
    "hiddens"                              -> ModuleName     {reject}
    "left"                                 -> ModuleName     {reject}
    "right"                                -> ModuleName     {reject}
    "assoc"                                -> ModuleName     {reject}
    "non-assoc"                            -> ModuleName     {reject}
    "bracket"                              -> ModuleName     {reject}
    "sorts"                                -> ModuleName     {reject}
    "restrictions"                         -> ModuleName     {reject}
    "language"                             -> ModuleName     {reject}
    "project"                              -> ModuleName     {reject}
    "retain"                               -> ModuleName     {reject}
    "with"                                 -> ModuleName     {reject}
    "unimports"                            -> ModuleName     {reject}
    "overlays"                             -> ModuleName     {reject}
    "rules"                                -> ModuleName     {reject}
    "signature"                            -> ModuleName     {reject}
    "strategies"                           -> ModuleName     {reject}
    "attributes"                           -> ModuleName     {reject}
    "template"                             -> ModuleName     {reject}
    "templates"                            -> ModuleName     {reject}
    "as"                                   -> ModuleName     {reject}
    "main"                                 -> ModuleName     {reject}
    "__default"                            -> ModuleName     {reject}
    "__internal"                           -> ModuleName     {reject}
    StrCon "(" arguments:{Symbol ","}* ")" -> Symbols        {reject}
    Associativity                          -> Label          {reject}
    Associativity                          -> ATermAttribute {reject}
    "reject"                               -> ATermAttribute {reject}
    "prefer"                               -> ATermAttribute {reject}
    "avoid"                                -> ATermAttribute {reject}
    "bracket"                              -> ATermAttribute {reject}
    "id" "(" ModuleName ")"                -> ATermAttribute {reject}

  context-free syntax
    CONTENTCOMPLETE -> ModuleName     {cons("COMPLETION-ModuleName")}
    CONTENTCOMPLETE -> Symbols        {cons("COMPLETION-Symbols")}
    CONTENTCOMPLETE -> Label          {cons("COMPLETION-Label")}
    CONTENTCOMPLETE -> ATermAttribute {cons("COMPLETION-ATermAttribute")}

  restrictions
    <Sort-CF> "aliases" "lexical" "priorities" "context-free" "definition"
    "syntax" "variables" "module" "imports" "exports" "hiddens" "left" "right"
    "assoc" "non-assoc" "bracket" "sorts" -/- [A-Za-z0-9]
    <NatCon-CF> -/- [0-9]
    <LAYOUT?-CF> -/- [\ \t\n\%]
    <NumChar-CF> -/- [0-9]
    <ModuleName-CF> -/- [A-Za-z0-9\_\-]

module sdf2-core/SDF
imports sdf2-core/Sdf2 modules/Modules

exports
  context-free start-symbols
    Module

  context-free syntax
    Group "." -> Group {cons("NonTransitive"), non-assoc}

  context-free syntax
    CONTENTCOMPLETE -> Group {cons("COMPLETION-Group")}

module TemplateLang
imports sdf2-core/SDF constants/StrCon sorts/Sorts symbols/Symbols labels/Labels
        constants/IdentifierCon kernel/Kernel restrictions/Restrictions
        priority/Priority basic/Basic modules/Modules

exports
  context-free start-symbols
    Module

  context-free syntax
    CONTENTCOMPLETE -> TemplateProduction {cons("WATER"), recover}
    CONTENTCOMPLETE -> PlaceholderOption  {cons("WATER"), recover}
    CONTENTCOMPLETE -> PlaceholderOptions {cons("WATER"), recover}

  context-free syntax
    CONTENTCOMPLETE -> TemplateProduction {cons("COMPLETION-TemplateProduction")}
    CONTENTCOMPLETE -> PlaceholderOption  {cons("COMPLETION-PlaceholderOption")}
    CONTENTCOMPLETE -> PlaceholderOptions {cons("COMPLETION-PlaceholderOptions")}

  context-free syntax
    "template" "options" TemplateOption* -> Section            {cons("TemplateOptions")}
    "newlines" ":" NewlineOptionValue    -> TemplateOption     {cons("Newlines")}
    "none"                               -> NewlineOptionValue {cons("None")}
    "leading"                            -> NewlineOptionValue {cons("Leading")}
    "trailing"                           -> NewlineOptionValue {cons("Trailing")}
    "separating"                         -> NewlineOptionValue {cons("Separating")}
    "keyword" "-/-" Lookaheads           -> TemplateOption     {cons("KeywordFollowRestriction")}
    "tokenize" ":" StrCon                -> TemplateOption     {cons("Tokenize")}

  context-free syntax
    CONTENTCOMPLETE -> Section            {cons("COMPLETION-Section")}
    CONTENTCOMPLETE -> NewlineOptionValue {cons("COMPLETION-NewlineOptionValue")}
    CONTENTCOMPLETE -> TemplateOption     {cons("COMPLETION-TemplateOption")}

  context-free syntax
    SortConsRef                            -> Group       {cons("SimpleRefGroup")}
    "{" SortConsRef+ "}"                   -> Group       {cons("ProdsRefGroup")}
    "{" Associativity ":" SortConsRef+ "}" -> Group       {cons("AssocRefGroup")}
    Symbol "." Constructor                 -> SortConsRef {cons("SortConsRef")}

  context-free syntax
    CONTENTCOMPLETE -> Group       {cons("COMPLETION-Group")}
    CONTENTCOMPLETE -> SortConsRef {cons("COMPLETION-SortConsRef")}

  context-free syntax
    "templates" TemplateProduction*            -> Section            {cons("TemplateSection"), deprecated("Use context-free syntax section instead")}
    "lexical" "syntax" SdfProduction*          -> Grammar            {cons("LexicalSyntax"), prefer}
    "context-free" "syntax" GeneralProduction* -> Grammar            {cons("ContextFreeSyntax"), prefer}
    "syntax" SdfProduction*                    -> Grammar            {cons("Kernel"), prefer}
    SdfProduction                              -> GeneralProduction  
    TemplateProduction                         -> GeneralProduction  {prefer}
    SymbolDef "=" RHS Attributes               -> SdfProduction      {cons("SdfProduction")}
    SortCons "=" RHS Attributes                -> SdfProduction      {cons("SdfProductionWithCons")}
    Symbols                                    -> RHS                {cons("Rhs")}
    SymbolDef "=" Template Attributes          -> TemplateProduction {cons("TemplateProduction")}
    SortCons "=" Template Attributes           -> TemplateProduction {cons("TemplateProductionWithCons")}
    IdCon                                      -> Constructor        {cons("Constructor")}
    SymbolDef "." Constructor                  -> SortCons           {cons("SortCons")}
    "<" Placeholder ">"                        -> TemplatePart1      {cons("Angled")}
    "[" Placeholder "]"                        -> TemplatePart2      {cons("Squared")}
    Symbol PlaceholderOptions                  -> Placeholder        {cons("Placeholder")}
                                               -> PlaceholderOptions {cons("NoOptions")}
    ";" {PlaceholderOption ","}+               -> PlaceholderOptions {cons("Options")}
    "hide"                                     -> PlaceholderOption  {cons("Hide")}
    "wrap"                                     -> PlaceholderOption  {cons("Wrap")}
    "anchor"                                   -> PlaceholderOption  {cons("Anchor")}
    "separator" "=" StrCon                     -> PlaceholderOption  {cons("Separator"), deprecated("Use list with separator symbol instead")}
    "text" "=" StrCon                          -> PlaceholderOption  {cons("Text")}

  context-free syntax
    CONTENTCOMPLETE -> Section            {cons("COMPLETION-Section")}
    CONTENTCOMPLETE -> Grammar            {cons("COMPLETION-Grammar")}
    CONTENTCOMPLETE -> GeneralProduction  {cons("COMPLETION-GeneralProduction")}
    CONTENTCOMPLETE -> SdfProduction      {cons("COMPLETION-SdfProduction")}
    CONTENTCOMPLETE -> RHS                {cons("COMPLETION-RHS")}
    CONTENTCOMPLETE -> TemplateProduction {cons("COMPLETION-TemplateProduction")}
    CONTENTCOMPLETE -> Constructor        {cons("COMPLETION-Constructor")}
    CONTENTCOMPLETE -> SortCons           {cons("COMPLETION-SortCons")}
    CONTENTCOMPLETE -> TemplatePart1      {cons("COMPLETION-TemplatePart1")}
    CONTENTCOMPLETE -> TemplatePart2      {cons("COMPLETION-TemplatePart2")}
    CONTENTCOMPLETE -> Placeholder        {cons("COMPLETION-Placeholder")}
    CONTENTCOMPLETE -> PlaceholderOptions {cons("COMPLETION-PlaceholderOptions")}
    CONTENTCOMPLETE -> PlaceholderOption  {cons("COMPLETION-PlaceholderOption")}

  syntax
    "<" {<TemplateLine1-CF> "\n"}+ ">"   -> <Template-CF>      {cons("Template")}
    "<<" {<TemplateLine1-CF> "\n"}+ ">>" -> <Template-CF>      {cons("TemplateDeprecated"), avoid, deprecated("Use single brackets to delimit the template")}
    <TemplatePart1-CF>*                  -> <TemplateLine1-CF> {cons("Line")}
    <TemplateString1-LEX>                -> <TemplatePart1-CF> {cons("String")}
    <TemplateEscape1-LEX>                -> <TemplatePart1-CF> {cons("Escape")}
    <TemplateLayout-LEX>                 -> <TemplatePart1-CF> {cons("Layout")}
    "[" {<TemplateLine2-CF> "\n"}+ "]"   -> <Template-CF>      {cons("TemplateSquare")}
    "[[" {<TemplateLine2-CF> "\n"}+ "]]" -> <Template-CF>      {cons("TemplateSquareDeprecated"), avoid, deprecated("Use single brackets to delimit the template")}
    <TemplatePart2-CF>*                  -> <TemplateLine2-CF> {cons("Line")}
    <TemplateString2-LEX>                -> <TemplatePart2-CF> {cons("String")}
    <TemplateEscape2-LEX>                -> <TemplatePart2-CF> {cons("Escape")}
    <TemplateLayout-LEX>                 -> <TemplatePart2-CF> {cons("Layout")}

  lexical syntax
    LF    -> EOL  
    CR    -> EOL  
    CR LF -> EOL  
    [\r]  -> CR   
    [\n]  -> LF   
    EOL   -> "\n" 

  lexical restrictions
    CR -/- [\n]

  lexical syntax
    [\ \t]+             -> TemplateLayout     
    TemplateString1Alt+ -> TemplateString1    
    TemplateString2Alt+ -> TemplateString2    
    ~[\\\"\ \t]+        -> TemplateStringQ    
    ~[\\\<\>\ \t\r\n]   -> TemplateString1Alt 
    ~[\\\[\]\ \t\r\n]   -> TemplateString2Alt 
    Backslash           -> TemplateString2Alt 
    [\\]                -> Backslash          

  lexical restrictions
    TemplateLayout -/- [\ \t]
    TemplateString1 -/- ~[\\\<\>\ \t\r\n]
    TemplateString2 -/- ~[\\\[\]\ \t\r\n]
    TemplateStringQ -/- ~[\\\"\ \t]
    TemplateString1 -/- [\\] . ~[\<\>\\]
    TemplateString2 -/- [\\] . ~[\[\]\\]
    Backslash -/- [\<\>\\]

  lexical syntax
    [a-zA-Z]* "CONTENTCOMPLETE" [0-9]+ -> CONTENTCOMPLETE       {avoid}
    EscapedChar1+                      -> TemplateEscape1       
    EscapedChar2+                      -> TemplateEscape2       
    "\\<"                              -> EscapedChar1          
    "\\>"                              -> EscapedChar1          
    "\\\\"                             -> EscapedChar1          
    "\\["                              -> EscapedChar2          
    "\\]"                              -> EscapedChar2          
    "\\\\"                             -> EscapedChar2          
    "<" EscapedChar1Alt* ">"           -> EscapedChar1          
    EscapedBackslashChar1              -> EscapedChar1Alt       
    EscapedChar                        -> EscapedChar1Alt       
    "<\\\\>" [\ \t\r]* [\n]            -> EscapedChar1          
    "[" EscapedChar2Alt* "]"           -> EscapedChar2          
    EscapedBackslashChar2              -> EscapedChar2Alt       
    EscapedChar                        -> EscapedChar2Alt       
    "[\\\\]" [\ \t\r]* [\n]            -> EscapedChar2          
    "\\\\"                             -> EscapedBackslashChar1 
    "\\\\"                             -> EscapedBackslashChar2 
    TemplateEscapeQAlt+                -> TemplateEscapeQ       
    EscapedChar                        -> TemplateEscapeQAlt    
    "\\\\"                             -> TemplateEscapeQAlt    
    "\\'"                              -> EscapedChar           
    '\\"'                              -> EscapedChar           
    "\\ "                              -> EscapedChar           
    "\\t"                              -> EscapedChar           
    "\\r"                              -> EscapedChar           
    "\\n"                              -> EscapedChar           
    "\\u" [0-9A-Fa-f]+                 -> EscapedUnicodeChar    
    EscapedUnicodeChar                 -> EscapedChar           
    "\\" ~[]                           -> EscapedChar           {cons("WATER"), recover}
    "<" ~[\>]+ ">"                     -> EscapedChar1          {cons("WATER"), recover}
    "[" ~[\]]+ "]"                     -> EscapedChar2          {cons("WATER"), recover}

  lexical restrictions
    TemplateEscape1 -/- [\\]
    TemplateEscape1 -/- [\<] . [\\\>]
    TemplateEscape2 -/- [\\]
    TemplateEscape2 -/- [\[] . [\\\]]
    TemplateEscapeQ -/- [\\]
    EscapedBackslashChar1 -/- [\>]
    EscapedBackslashChar2 -/- [\]]
    EscapedUnicodeChar -/- [0-9A-Fa-f]