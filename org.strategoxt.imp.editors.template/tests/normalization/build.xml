<?xml version="1.0" encoding="UTF-8" ?>

<project name="TemplateLang">
	
    <!-- Importing Ant Macros -->
    <taskdef classpath="${eclipse.spoofaximp.strategojar}" resource="org/strategoxt/antcontrib/strategoxt-antlib.xml" />
    <taskdef classpath="${eclipse.spoofaximp.strategojar}" resource="net/sf/antcontrib/antlib.xml" />
	
	<property name="nativepath" value="${eclipse.spoofaximp.nativeprefix}"/>
	<property name="unity" location="unity" />
	
	<macrodef name="normalize">
        <attribute name="input" />
        <attribute name="output" />
        <attribute name="main" />
        <sequential>
            <uptodate-io input="@{input}" output="@{output}" type="sdf2table">
                <action>
                    <exec executable="${nativepath}/sdf2table">
                        <arg value="-t" />
                        <arg value="-i" />
                        <arg value="@{input}" />
                        <arg value="-m" />
                        <arg value="@{main}" />
                        <arg value="-o" />
                        <arg value="@{output}" />
                        <arg value="-n" />
                    </exec>
                </action>
            </uptodate-io>
        </sequential>
    </macrodef>
	
	<macrodef name="implodePT">
	            <attribute name="input" />
	            <attribute name="output" />
	            <sequential>
	                <uptodate-io input="@{input}" output="@{output}" type="sdf2table">
	                    <action>
	                        <exec executable="${nativepath}/implodePT">
	                            <arg value="-i" />
	                            <arg value="@{input}" />
	                            <arg value="-o" />
	                            <arg value="@{output}" />
	                        </exec>
	                    </action>
	                </uptodate-io>
	            </sequential>
	        </macrodef>
	

    <macrodef name="pp-sdf">
        <attribute name="input" />
        <attribute name="output" />
        <sequential>
            <uptodate-io input="@{input}" output="@{output}" type="pp-sdf">
                <action>
                    <java classname="run" failonerror="true">
                        <arg value="org.strategoxt.tools.main-pp-sdf" />
                        <arg value="-i" />
                        <arg value="${basedir}/@{input}" />
                        <arg value="-o" />
                        <arg value="${basedir}/@{output}" />
                    </java>
                </action>
            </uptodate-io>
        </sequential>
    </macrodef>
	
	<macrodef name="pp-aterm">
	        <attribute name="input" />
	        <attribute name="output" />
	        <sequential>
	            <uptodate-io input="@{input}" output="@{output}" type="pp-aterm">
	                <action>
	                    <java classname="run" failonerror="true">
	                        <arg value="org.strategoxt.tools.main-pp-aterm" />
	                        <arg value="-i" />
	                        <arg value="${basedir}/@{input}" />
	                        <arg value="-o" />
	                        <arg value="${basedir}/@{output}" />
	                    </java>
	                </action>
	            </uptodate-io>
	        </sequential>
	    </macrodef>
	
	<target name="generate.all">
		<echo message="Generating normalized definitions for all grammars" />
		<subant genericantfile="${basedir}/build.xml" target="generate">
            <dirset dir="${unity}" includes="**" excludes="**/normalized/" />
            <property name="basedir'" value="${basedir}" />
        </subant>
	</target>
	
	<target name="generate">
		<for param="input">
            <path>
                <fileset dir="${basedir}" includes="*.sdf" excludes="*-normalized.sdf"/>
            </path>

            <sequential>
                <local name="module" />
                <basename file="@{input}" property="module" suffix=".sdf" />
                <echo message="${module}" />
            	
            	<pack-sdf input="${module}.sdf" output="${module}.def" />
            	<normalize input="${module}.def" output="${module}.normalized.pt" main="${module}" /> 
            	<implodePT input="${module}.normalized.pt" output="${module}.normalized.aterm.binary" />
            	<pp-aterm input="${module}.normalized.aterm.binary" output="${module}.normalized.aterm.temp" />
            	<echo message="module(unparameterized(&quot;${module}-normalized&quot;), [], [ exports(" file="${module}.normalized.aterm" />
            	<concat destfile="${module}.normalized.aterm" append="true">
            	    <filelist dir="${basedir}" files="${module}.normalized.aterm.temp"/>
            	</concat>            	
            	<echo message=")])" file="${module}.normalized.aterm.footer" />
            	<concat destfile="${module}.normalized.aterm" append="true">
            		<filelist dir="${basedir}" files="${module}.normalized.aterm.footer"/>
            	</concat>
            	<pp-sdf input="${module}.normalized.aterm" output="${module}-normalized.sdf" />
            	<delete includeemptydirs="true" failonerror="false">
					<fileset dir="${basedir}" >
						<include name="**/*.binary"/>
						<include name="**/*.temp" />
						<include name="**/*.aterm" />
						<include name="**/*.footer" />
						<include name="**/*.pt" />
						<include name="**/*.def" />
					</fileset>
				</delete>
            	
				<antcall target="refresh" />     
            		
            </sequential>
        </for>
    </target>
	
	<target name="refresh" >
		<trycatch>
			<try>
				<eclipse.convertPath fileSystemPath="${basedir}" property="projectdir" />
				<eclipse.refreshLocal resource="${projectdir}" depth="infinite" />
			</try>
			<catch>
				<echo message="Could not refresh files inside eclipse" />
			</catch>
		</trycatch>
	</target>
	
	<target name="clean" >
		<delete includeemptydirs="true" failonerror="false">
			<fileset dir="${basedir}" >
				<include name="**/*.normalized.sdf"/>
			</fileset>
		</delete>
		<antcall target="refresh" />
	</target>
	
	<target name="main">
		<antcall target="generate.all"/>
	</target>

</project>