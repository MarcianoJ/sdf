<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project default="all" name="TemplateLang">
    
    <!-- Key input modules -->
    <property name="sdfmodule" value="TemplateLang"/>
    <property name="metasdfmodule" value="Stratego-TemplateLang"/>
    <property name="esvmodule" value="TemplateLang"/>
    <property name="strmodule" value="templatelang"/>
    <property name="ppmodule" value="TemplateLang-pp"/>
    <property name="sigmodule" value="TemplateLang-sig"/> 
    

    <!-- Project directories -->
    <property location="trans" name="trans"/>
    <property location="trans" name="trans.rel" relative="yes"/>
    <property location="editor/java" name="src-gen"/>
    <property location="src-gen/syntax" name="syntax"/>
    <property name="syntax.rel" relative="yes" value="${syntax}"/>
    <property location="include" name="include"/>
    <property name="include.rel" relative="yes" value="${include}"/>
    <property location="lib" name="lib"/>
    <property location="target/classes" name="build"/>
    <property location="bin/dist" name="dist"/>
    <property location="src-gen/pp" name="pp"/>
    <property location="src-gen/signatures" name="signatures"/>
    <property location="src-gen" name="sdf-src-gen"/>
    <property location="include" name="lib-gen"/>
    <property location="${lib-gen}" relative="yes" name="lib-gen.rel"/> 

    <!-- Imports -->
    <property name="build.sdf.imports" value="-Idef ${lib}/SDF.def"/>
    <property name="build.stratego.args" value="        --library        -I &quot;${basedir}&quot;        -I &quot;${trans}&quot;        -la stratego-lib -la stratego-sglr -la stratego-gpp -la stratego-xtc -la stratego-aterm             -la stratego-sdf -la strc"/>

    <!--property name="build.stratego.args" value="
      - -library
      -I &quot;${basedir}&quot;
      -I &quot;${trans}&quot;
      -la stratego-lib -la stratego-sglr -la stratego-gpp -la stratego-xtc -la stratego-aterm   
      -la stratego-sdf -la strc -la org.strategoxt.imp.editors.template.generated" /-->

    <!-- Optional: external .def and .jar locations
  <property name="externaldef" location="syntax/${sdfmodule}.def"/>
  <property name="externaljar" value="../lib.jar"/>
  <property name="externaljarflags" value="-la org.lib"/>
  -->

    <!-- Environment configuration for command-line builds -->
    <condition else="" property="build.strategoxt.sdf" value="${eclipse.spoofaximp.nativeprefix}">
        <isset property="eclipse.spoofaximp.nativeprefix"/>
    </condition>
    <property name="nativepath" value="${build.strategoxt.sdf}/"/>
    <property location="${user.home}/.nix-profile/bin" name="build.strategoxt.sdf"/>
	<property name="build.strategoxt.stratego" location="${user.home}/.nix-profile/bin"/>

    <import file="build.generated.xml"/>

    <!-- The files for which the on-save handler is called before building. -->
    <path id="call-onsave.files">
        <fileset dir=".">
            <include name="**/*.tmpl"/>
            <include name="**/*.sdf3_"/>
            <include name="**/*.nab"/>
            <include name="**/*.ts"/>
        </fileset>
    </path>

    <!-- Main target -->
    <target depends="pppack-esv, spoofaximp.default.ctree" name="all"/>
	<target name="generate-sources" depends="generate-sources-ctree" />
	<target name="package" depends="package-ctree" />


    <!-- Target to create EditorService-pretty.pp.af from EditorService-pretty.pp -->
    <available file="include/EditorService-pretty.pp.af" property="pppack-esv.available"/>
    <target name="pppack-esv" unless="pppack-esv.available">
        <java classname="run" failonerror="true">
            <arg value="org.strategoxt.tools.main-parse-pp-table"/>
            <arg value="-i"/>
            <arg value="${lib}/EditorService-pretty.pp"/>
            <arg value="-o"/>
            <arg value="${include}/EditorService-pretty.pp.af"/>
        </java>
    </target>
	
	<!-- Don't clean the src-gen folder because of bootstraping issues -->
	<target name="clean" description="Clean project">
	        <delete dir="${build}" failonerror="false" />
	        <delete dir=".cache" failonerror="false" />
	        <delete file="${include}/${sdfmodule}.def" failonerror="false" />
	        <delete file="${include}/${sdfmodule}-parenthesize.str" failonerror="false" />
	        <delete file="${include}/${sdfmodule}-Permissive.def" failonerror="false" />
	        <delete file="${include}/${sdfmodule}.generated.pp.af" failonerror="false" />
	        <delete file="${include}/${sdfmodule}.packed.esv" failonerror="false" />
	        <delete file="${include}/${sdfmodule}.pp.af" failonerror="false" />
	        <delete file="${include}/${sdfmodule}.rtg" failonerror="false" />
	        <delete file="${lib-gen}/${ppmodule}.jar" failonerror="false" />
	        <delete file="${lib-gen}/${ppmodule}.rtree" failonerror="false" />
	        <delete file="${lib-gen}/${sigmodule}.str" failonerror="false" />
	        <delete file="${lib-gen}/${sigmodule}.ctree" failonerror="false" />
	        <delete file="${lib-gen}/${sigmodule}.rtree" failonerror="false" />
	        <delete file="${lib-gen}/${sigmodule}.ctree.dep" failonerror="false" />
	        <delete file="${include}/${sdfmodule}.str" failonerror="false" />
	        <delete file="${include}/${sdfmodule}.tbl" failonerror="false" />
	        <delete file="${include}/${strmodule}.rtree" failonerror="false" />
	        <delete file="${include}/${strmodule}.ctree" failonerror="false" />
	        <delete file="${include}/${strmodule}.ctree.dep" failonerror="false" />
	        <delete file="${include}/${strmodule}.jar" failonerror="false" />
	        <delete dir="${src-gen}/trans" failonerror="false" />
	        <delete file="${syntax}/${sdfmodule}.generated.esv" failonerror="false" />
	        <delete file="${syntax}/${sdfmodule}.generated.pp" failonerror="false" />
	        <delete file="${include}/${metasdfmodule}-Permissive.def" failonerror="false" />
	        <delete file="${include}/${metasdfmodule}.def" failonerror="false" />
	        <delete file="${include}/${metasdfmodule}.tbl" failonerror="false" />
	        <delete dir="utils" failonerror="false" />
	        <delete failonerror="false">
	            <fileset dir="${lib}" includes="*.generated.str" erroronmissingdir="false" />
	        </delete>
	        <antcall target="refresh-cleaned" />
	    </target>
    
   
</project>
