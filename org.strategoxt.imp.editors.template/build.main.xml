<?xml version="1.0" encoding="UTF-8" ?>

<project name="TemplateLang" default="all">

	<!-- Key input modules -->
	<property name="sdfmodule" value="TemplateLang" />
	<property name="metasdfmodule" value="Stratego-TemplateLang" />
	<property name="esvmodule" value="TemplateLang" />
	<property name="strmodule" value="templatelang" />
	<property name="ppmodule" value="TemplateLang-pp" />

	<!-- Project directories -->
	<property name="trans" location="trans" />
	<property name="src-gen" location="editor/java" />
	<property name="syntax" location="src-gen/syntax" />
	<property name="include" location="include" />
	<property name="lib" location="lib" />
	<property name="build" location="bin" />
	<property name="dist" location="bin/dist" />
	<property name="pp" location="src-gen/pp" />
	<property name="signatures" location="src-gen/signatures" />
	<property name="sdf-src-gen" location="src-gen" />

	<!-- Imports -->
	<property name="build.sdf.imports" value="-Idef ${lib}/SDF.def" />
	<property name="build.stratego.args" value="
	      --library
	      -I &quot;${basedir}&quot;
	      -I &quot;${trans}&quot;
	      -la stratego-lib -la stratego-sglr -la stratego-gpp -la stratego-xtc -la stratego-aterm   
  	      -la stratego-sdf -la strc" />

	<!--property name="build.stratego.args" value="
      - -library
      -I &quot;${basedir}&quot;
      -I &quot;${trans}&quot;
      -la stratego-lib -la stratego-sglr -la stratego-gpp -la stratego-xtc -la stratego-aterm   
      -la stratego-sdf -la strc -la org.strategoxt.imp.editors.template.generated" /-->

	<!-- Optional: external .def and .jar locations
  <property name="externaldef" location="syntax/${sdfmodule}.def"/>
  <property name="externaljar" value="../lib.jar"/>
  <property name="externaljarflags" value="-la org.lib"/>
  -->

	<!-- Environment configuration for command-line builds -->
	<condition property="build.strategoxt.sdf" value="${eclipse.spoofaximp.nativeprefix}" else="">
		<isset property="eclipse.spoofaximp.nativeprefix" />
	</condition>
	<property name="build.strategoxt.stratego" location="${user.home}/.nix-profile/bin" />

	<import file="build.generated.xml" />

	<!-- The files for which the on-save handler is called before building. -->
	<path id="call-onsave.files">
		<fileset dir=".">
			<include name="**/*.tmpl" />
			<include name="**/*.sdf3_" />
			<include name="**/*.nab" />
			<include name="**/*.ts" />
		</fileset>
	</path>

	<!-- Main target -->
	<target name="all" depends="pppack-esv, spoofaximp.default.ctree, pp.jar" />


	<!-- Target to create EditorService-pretty.pp.af from EditorService-pretty.pp -->
	<available file="include/EditorService-pretty.pp.af" property="pppack-esv.available" />
	<target name="pppack-esv" unless="pppack-esv.available">
		<java classname="run" failonerror="true">
			<arg value="org.strategoxt.tools.main-parse-pp-table" />
			<arg value="-i" />
			<arg value="${lib}/EditorService-pretty.pp" />
			<arg value="-o" />
			<arg value="${include}/EditorService-pretty.pp.af" />
		</java>
	</target>

	
	<available file="${pp}/${ppmodule}.str" property="pp.module.enabled" />

	<!-- Target to create ctree from generated pp and signatures -->
	<target name="pp.ctree">
		<fail message="Main pp file '${ppmodule}.str' not found.">
			<condition>
				<not>
					<isset property="pp.module.enabled" />
				</not>
			</condition>
		</fail>
		<dependset>
			<srcfileset dir="${pp}">
				<include name="**/*.str" />
				<include name="**/*.astr" />
			</srcfileset>
			<srcfileset dir="${signatures}">
				<include name="**/*.str" />
				<include name="**/*.astr" />
			</srcfileset>
			<targetfileset file="${pp}/${ppmodule}.ctree" />
		</dependset>
		<available file="${pp}/${ppmodule}.ctree" property="pp-module.available" />
		<antcall target="pp.ctree.helper">
			<param name="build.ctree.outputfile" value="${sdf-src-gen}/${ppmodule}.ctree" />
			<param name="build.ctree.extraargs" value="-F" />
		</antcall>
	</target>
	
	
	<!-- Target to create jar from generated pp and signatures -->
	<target name="pp.jar" depends="utils-files">
		<fail message="Main pp file '${ppmodule}.str' not found.">
			<condition>
				<not>
					<isset property="pp.module.enabled" />
				</not>
			</condition>
		</fail>
		<dependset>
			<srcfileset dir="${pp}">
				<include name="**/*.str" />
				<include name="**/*.astr" />
			</srcfileset>
			<srcfileset dir="${signatures}">
				<include name="**/*.str" />
				<include name="**/*.astr" />
			</srcfileset>
			<targetfileset file="${src-gen}/pplib/Main.java" />
		</dependset>
		
		<available file="${src-gen}/pplib/Main.java" property="pp-java.available" />
		<antcall target="pp.jar.deletehelper" />
		<antcall target="pp.jar.helper">
			<param name="build.jar.outputfile" value="${src-gen}/pplib/Main.java" />
			<param name="build.jar.extraargs" value="" />
		</antcall>
		<javac srcdir="${src-gen}" includes="pplib/**" destdir="${build}" source="1.7" target="1.7" debug="on">
			<classpath>
				<pathelement path="utils/strategoxt.jar:${src-gen}${externaljarimport1}${externaljarimport2}${java.jar.classpath}" />
				<!--fileset dir="${eclipse.home}/plugins">
					<include name="*.jar" />
				</fileset-->
				<!-- Spoofax/322 -->
			</classpath>
		</javac>
		<!-- copy imported terms -->
		<copy todir="${build}/pplib">
				<fileset dir="${src-gen}/pplib" excludes="**/*.java" />
		</copy>
		<jar basedir="${build}" includes="pplib/**" destfile="${include}/${ppmodule}.tmp.jar" />
		<move file="${include}/${ppmodule}.tmp.jar" tofile="${include}/${ppmodule}.jar" />
	    <delete>
			<fileset dir="${build}" includes="pplib/**" />
		</delete> 
	</target>
	
	<target name="pp.jar.deletehelper" unless="pp-java.available">
				<delete>
					<fileset dir="${src-gen}" includes="pplib/**" />
					<fileset dir="${build}" includes="pplib/**" />
					<!-- fileset dir="${pp}" includes="${ppmodule}.rtree" /-->
				</delete>
			</target>
	
	<property name="build.ppjar.args" value="
		      --library
		      -I &quot;${basedir}&quot;
		      -I &quot;${trans}&quot;
		      -la stratego-lib -la stratego-sglr -la stratego-gpp -la stratego-xtc -la stratego-aterm   
	  	      -la stratego-sdf -la strc" />
	
	<target name="pp.jar.helper" unless="pp-java.available" if="pp.module.enabled">
		<!--delete file="${include}/${strmodule}.rtree" failonerror="false" /-->
		<java classname="org.strategoxt.strj.Main" failonerror="true">
			<arg value="-i" />
			<arg value="${pp}/${ppmodule}.str" />
			<arg value="-o" />
			<arg value="${build.jar.outputfile}" />
			<arg value="-p" />
			<arg value="pplib" />
			<arg value="--library" />
			<arg value="--clean" />			
			<arg line="${build.ppjar.args}" />
			<arg line="${build.jar.extraargs}" />
			<arg line="${externaljarflags}" />
			<arg line="${externaldefimport}" />
			<arg line="-I &quot;${lib}&quot; -I &quot;${include}&quot; --cache-dir &quot;${basedir}/.cache&quot;" />
		</java>
		<!--delete file="${include}/${strmodule}.rtree" failonerror="false" /-->
		<mkdir dir="${build}/pplib" />
	</target>
	
	<target name="clean" description="Clean project">
				<delete dir="${build}" />
				<delete dir=".cache" />
				<delete>
					<fileset dir="editor" includes="*.generated.*" />
		      <fileset dir="trans" includes="*.pp.generated.str" />
				</delete>
				<delete dir="${src-gen}/trans" />
				<delete file="editor/${sdfmodule}.generated.esv" />
				<delete file="${syntax}/${sdfmodule}.generated.esv" />
				<delete file="${syntax}/${sdfmodule}.generated.pp" />
				<delete file="${include}/${metasdfmodule}-Permissive.def" />
				<delete file="${include}/${metasdfmodule}.def" />
				<delete file="${include}/${metasdfmodule}.tbl" />
				<delete file=".settings/org.eclipse.jdt.core.prefs" />
				<delete dir="utils" />
				<delete>
					<fileset dir="${lib}" includes="*.generated.str" />
				</delete>
				<antcall target="refresh-cleaned" />
			</target>

	<target name="java.jar" if="java.jar.enabled">
			<jar basedir="${build}" excludes="trans/** pplib/**" update="true" destfile="${include}/${strmodule}-java.jar" />
		</target>


</project>
