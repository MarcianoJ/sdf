module TemplateLang

imports sdf2-core/SDF	
        constants/StrCon	
        sorts/Sorts	
        symbols/Symbols	
        labels/Labels	
        constants/IdentifierCon	
        kernel/Kernel	
        restrictions/Restrictions	
        priority/Priority	
        basic/Basic	
        modules/Modules


context-free start-symbols

  Module

context-free syntax

  TemplateProduction.WATER = <<CONTENTCOMPLETE>> {recover}
  PlaceholderOption.WATER = <<CONTENTCOMPLETE>> {recover}
  PlaceholderOptions.WATER = <<CONTENTCOMPLETE>> {recover}

context-free syntax

  Section.TemplateOptions = <
	template options 
	
		<{TemplateOption "\n"}*>
	
	> 
  TemplateOption.Newlines = <newlines : <NewlineOptionValue>> 
  NewlineOptionValue.None = <none> 
  NewlineOptionValue.Leading = <leading> 
  NewlineOptionValue.Trailing = <trailing> 
  NewlineOptionValue.Separating = <separating> 
  TemplateOption.KeywordFollowRestriction = <keyword -/- <Lookaheads>> 
  TemplateOption.Tokenize = <tokenize : <StrCon>> 

context-free syntax

  Group.SimpleRefGroup = <<SortConsRef>> 
  Group.ProdsRefGroup = <{<{SortConsRef "\n"}+>}> 
  Group.AssocRefGroup = <
	{<Associativity> :
		<{SortConsRef "\n"}+>}> 
  SortConsRef.SortConsRef = <<Symbol>.<Constructor>> 

context-free syntax

  Section.TemplateSection = <
	templates 
	
		<{TemplateProduction "\n"}*>
	
	> {deprecated("Use context-free syntax section instead")}
  Grammar.LexicalSyntax = <
	lexical syntax 
	
		<{SdfProduction "\n"}*>
	
	> {prefer}
  Grammar.ContextFreeSyntax = <
	context-free syntax 
	
		<{GeneralProduction "\n"}*>
	
	> {prefer}
  Grammar.Kernel = <
	syntax 
	
		<{SdfProduction "\n"}*>
	
	> {prefer}
  GeneralProduction = <<SdfProduction>> 
  GeneralProduction = <<TemplateProduction>> {prefer}
  SdfProduction.SdfProduction = <<SymbolDef> = <RHS> <Attributes>> 
  SdfProduction.SdfProductionWithCons = <<SortCons> = <RHS> <Attributes>> 
  RHS.Rhs = <<Symbols>> 
  TemplateProduction.TemplateProduction = <<SymbolDef> = <Template> <Attributes>> 
  TemplateProduction.TemplateProductionWithCons = <<SortCons> = <Template> <Attributes>> 
  Constructor.Constructor = <<IdCon>> 
  SortCons.SortCons = <<SymbolDef>.<Constructor>> 
  TemplatePart1.Angled = <\<<Placeholder>\>> 
  TemplatePart2.Squared = <[<Placeholder>]> 
  Placeholder.Placeholder = <<Symbol><PlaceholderOptions>> 
  PlaceholderOptions.NoOptions = <> 
  PlaceholderOptions.Options = <;<{PlaceholderOption ", "}+>> 
  PlaceholderOption.Hide = <hide> 
  PlaceholderOption.Wrap = <wrap> 
  PlaceholderOption.Anchor = <anchor> 
  PlaceholderOption.Separator = <separator=<StrCon>> {deprecated("Use list with separator symbol instead")}
  PlaceholderOption.Text = <text=<StrCon>> 

syntax

  Template-CF.Template = "<" {TemplateLine1-CF "\n"}+ ">" 
  Template-CF.TemplateDeprecated = "<<" {TemplateLine1-CF "\n"}+ ">>" {avoid, deprecated("Use single brackets to delimit the template")}
  TemplateLine1-CF.Line = TemplatePart1-CF* 
  TemplatePart1-CF.String = TemplateString1-LEX 
  TemplatePart1-CF.Escape = TemplateEscape1-LEX 
  TemplatePart1-CF.Layout = TemplateLayout-LEX 
  Template-CF.TemplateSquare = "[" {TemplateLine2-CF "\n"}+ "]" 
  Template-CF.TemplateSquareDeprecated = "[[" {TemplateLine2-CF "\n"}+ "]]" {avoid, deprecated("Use single brackets to delimit the template")}
  TemplateLine2-CF.Line = TemplatePart2-CF* 
  TemplatePart2-CF.String = TemplateString2-LEX 
  TemplatePart2-CF.Escape = TemplateEscape2-LEX 
  TemplatePart2-CF.Layout = TemplateLayout-LEX 

lexical syntax

  "\n" = [\r\n] 
  TemplateLayout = [\ \t]+ 
  TemplateString1 = TemplateString1Alt+ 
  TemplateString2 = TemplateString2Alt+ 
  TemplateStringQ = ~[\\\"\ \t]+ 
  TemplateString1Alt = ~[\\\<\>\ \t\r\n] 
  TemplateString2Alt = ~[\\\[\]\ \t\r\n] 
  TemplateString2Alt = Backslash 
  Backslash = [\\] 

lexical restrictions

  TemplateLayout -/- [\ \t]
  TemplateString1 -/- ~[\\\<\>\ \t\r\n]
  TemplateString2 -/- ~[\\\[\]\ \t\r\n]
  TemplateStringQ -/- ~[\\\"\ \t]
  TemplateString1 -/- [\\].~[\<\>\\]
  TemplateString2 -/- [\\].~[\[\]\\]
  Backslash -/- [\<\>\\]

lexical syntax

  CONTENTCOMPLETE = [a-zA-Z]* "CONTENTCOMPLETE" [0-9]+ {avoid}
  TemplateEscape1 = EscapedChar1+ 
  TemplateEscape2 = EscapedChar2+ 
  EscapedChar1 = "\\<" 
  EscapedChar1 = "\\>" 
  EscapedChar1 = "\\\\" 
  EscapedChar2 = "\\[" 
  EscapedChar2 = "\\]" 
  EscapedChar2 = "\\\\" 
  EscapedChar1 = "<" EscapedChar1Alt* ">" 
  EscapedChar1Alt = EscapedBackslashChar1 
  EscapedChar1Alt = EscapedChar 
  EscapedChar1 = "<\\\\>" [\ \t\r]* [\n] 
  EscapedChar2 = "[" EscapedChar2Alt* "]" 
  EscapedChar2Alt = EscapedBackslashChar2 
  EscapedChar2Alt = EscapedChar 
  EscapedChar2 = "[\\\\]" [\ \t\r]* [\n] 
  EscapedBackslashChar1 = "\\\\" 
  EscapedBackslashChar2 = "\\\\" 
  TemplateEscapeQ = TemplateEscapeQAlt+ 
  TemplateEscapeQAlt = EscapedChar 
  TemplateEscapeQAlt = "\\\\" 
  EscapedChar = "\\'" 
  EscapedChar = '\\"' 
  EscapedChar = "\\ " 
  EscapedChar = "\\t" 
  EscapedChar = "\\r" 
  EscapedChar = "\\n" 
  EscapedUnicodeChar = "\\u" [0-9A-Fa-f]+ 
  EscapedChar = EscapedUnicodeChar 
  EscapedChar.WATER = "\\" ~[] {recover}
  EscapedChar1.WATER = "<" ~[\>]+ ">" {recover}
  EscapedChar2.WATER = "[" ~[\]]+ "]" {recover}

lexical restrictions

  TemplateEscape1 -/- [\\]
  TemplateEscape1 -/- [\<].[\\\>]
  TemplateEscape2 -/- [\\]
  TemplateEscape2 -/- [\[].[\\\]]
  TemplateEscapeQ -/- [\\]
  EscapedBackslashChar1 -/- [\>]
  EscapedBackslashChar2 -/- [\]]
  EscapedUnicodeChar -/- [0-9A-Fa-f]
