module src-gen/pp/literals/Literals-pp

imports
  libstratego-gpp
  runtime/tmpl/pp
  src-gen/signatures/literals/Literals-sig


imports
  src-gen/signatures/kernel/Kernel-sig


imports
  src-gen/signatures/constants/StrCon-sig


imports
  src-gen/signatures/constants/IdentifierCon-sig


imports
  src-gen/pp/kernel/Kernel-pp


imports
  src-gen/pp/constants/StrCon-pp


imports
  src-gen/pp/constants/IdentifierCon-pp


strategies
  prettyprint-SingleQuotedStrChar =
    ![S(<is-string>)]

  prettyprint-SingleQuotedStrCon =
    ![S(<is-string>)]

  prettyprint-example =
    prettyprint-SingleQuotedStrChar

  prettyprint-example =
    prettyprint-SingleQuotedStrCon


strategies
  prettyprint-example =
    prettyprint-FunctionName

  prettyprint-FunctionName :
    UnquotedFun(t0__) -> [ H(
                             [SOpt(HS(), "0")]
                           , [t0__']
                           )
                         ]
    with t0__' := <pp-one-Z(prettyprint-IdCon)> t0__

  is-FunctionName =
    ?UnquotedFun(_)

  prettyprint-FunctionName :
    QuotedFun(t0__) -> [ H(
                           [SOpt(HS(), "0")]
                         , [t0__']
                         )
                       ]
    with t0__' := <pp-one-Z(prettyprint-StrCon)> t0__

  is-FunctionName =
    ?QuotedFun(_)

  is-FunctionName =
    fail


strategies
  prettyprint-example =
    prettyprint-Symbol

  prettyprint-example =
    prettyprint-Production

  prettyprint-Symbol :
    Lit(string__) -> [ H(
                         [SOpt(HS(), "0")]
                       , [string__']
                       )
                     ]
    with string__' := <pp-one-Z(prettyprint-StrCon)> string__

  is-Symbol =
    ?Lit(_)

  prettyprint-Symbol :
    CiLit(ci-string__) -> [ H(
                              [SOpt(HS(), "0")]
                            , [ci-string__']
                            )
                          ]
    with ci-string__' := <pp-one-Z(prettyprint-SingleQuotedStrCon)> ci-string__

  is-Symbol =
    ?CiLit(_)

  prettyprint-Production :
    PrefixFun(fun__, arguments__, result__, t0__) -> [ H(
                                                         [SOpt(HS(), "0")]
                                                       , [ fun__'
                                                         , S("(")
                                                         , arguments__'
                                                         , S(") -> ")
                                                         , result__'
                                                         , S(" ")
                                                         , t0__'
                                                         ]
                                                       )
                                                     ]
    with fun__' := <pp-one-Z(prettyprint-FunctionName)> fun__
    with arguments__' := <pp-H-list(prettyprint-Symbol|", ")> arguments__
    with result__' := <pp-one-Z(prettyprint-Symbol)> result__
    with t0__' := <pp-one-Z(prettyprint-Attributes)> t0__

  is-Production =
    ?PrefixFun(_, _, _, _)

  is-Symbol =
    fail

  is-Production =
    fail