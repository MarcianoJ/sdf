module sdf3/Modules
imports sdf3/Kernel sdf3/Renaming

exports
  context-free start-symbols
    Module

  lexical syntax
    [A-Za-z0-9\_\-]+        -> ModuleWord {cons("Word")}
    ModuleWord              -> ModuleId   {cons("Leaf")}
    "/" ModuleId            -> ModuleId   
    ModuleWord "/" ModuleId -> ModuleId   {cons("Path")}

  context-free syntax
    Module*                                  -> Definition 
    "module" ModuleName ImpSection* Sections -> Module     {cons("Module")}
    "exports" Grammar                        -> Section    {cons("Exports")}
    "hiddens" Grammar                        -> Section    {cons("Hiddens")}
    Section*                                 -> Sections   
    ModuleId                                 -> ModuleName {cons("Unparameterized")}
    ModuleId "[" params:Symbols "]"          -> ModuleName {cons("Parameterized")}
    "imports" list:Imports                   -> ImpSection {cons("Imports")}
    ImpSection                               -> Grammar    {cons("ImpSection")}
    Import*                                  -> Imports    
    ModuleName                               -> Import     {cons("Module")}
    ModuleName Renamings                     -> Import     {cons("RenamedModule")}
    "(" Import ")"                           -> Import     {bracket}

  context-free syntax
    CONTENTCOMPLETE -> Definition {cons("COMPLETION-Definition")}
    CONTENTCOMPLETE -> Module     {cons("COMPLETION-Module")}
    CONTENTCOMPLETE -> Section    {cons("COMPLETION-Section")}
    CONTENTCOMPLETE -> Sections   {cons("COMPLETION-Sections")}
    CONTENTCOMPLETE -> ModuleName {cons("COMPLETION-ModuleName")}
    CONTENTCOMPLETE -> ImpSection {cons("COMPLETION-ImpSection")}
    CONTENTCOMPLETE -> Grammar    {cons("COMPLETION-Grammar")}
    CONTENTCOMPLETE -> Imports    {cons("COMPLETION-Imports")}
    CONTENTCOMPLETE -> Import     {cons("COMPLETION-Import")}

  lexical restrictions
    ModuleWord -/- [A-Za-z0-9\_\-]
    ModuleId -/- [\/]