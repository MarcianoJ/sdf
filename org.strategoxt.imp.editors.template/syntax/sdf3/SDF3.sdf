module sdf3/SDF3
imports sdf3/SDF

exports
  context-free syntax
    CONTENTCOMPLETE -> TemplateProduction {cons("WATER"), recover}
    CONTENTCOMPLETE -> PlaceholderOption  {cons("WATER"), recover}
    CONTENTCOMPLETE -> PlaceholderOptions {cons("WATER"), recover}

  context-free syntax
    CONTENTCOMPLETE -> TemplateProduction {cons("COMPLETION-TemplateProduction")}
    CONTENTCOMPLETE -> PlaceholderOption  {cons("COMPLETION-PlaceholderOption")}
    CONTENTCOMPLETE -> PlaceholderOptions {cons("COMPLETION-PlaceholderOptions")}

  context-free syntax
    "template" "options" TemplateOption* -> Section            {cons("TemplateOptions")}
    "newlines" ":" NewlineOptionValue    -> TemplateOption     {cons("NewLines")}
    "none"                               -> NewlineOptionValue {cons("None")}
    "leading"                            -> NewlineOptionValue {cons("Leading")}
    "trailing"                           -> NewlineOptionValue {cons("Trailing")}
    "separating"                         -> NewlineOptionValue {cons("Separating")}
    "keyword" "-/-" Lookaheads           -> TemplateOption     {cons("KeywordFollowRestriction")}
    "tokenize" ":" StrCon                -> TemplateOption     {cons("Tokenize")}

  context-free syntax
    CONTENTCOMPLETE -> Section            {cons("COMPLETION-Section")}
    CONTENTCOMPLETE -> NewlineOptionValue {cons("COMPLETION-NewlineOptionValue")}
    CONTENTCOMPLETE -> TemplateOption     {cons("COMPLETION-TemplateOption")}

  context-free syntax
    SortCons                           -> Group {cons("SimpleRefGroup")}
    "{" SortCons+ "}"                  -> Group {cons("ProdsRefGroup")}
    "{Associativity" ":" SortCons+ "}" -> Group {cons("AssocRefGroup")}

  context-free syntax
    CONTENTCOMPLETE -> Group {cons("COMPLETION-Group")}

  context-free syntax
    "templates" TemplateProduction*                                       -> Section            {cons("TemplateSection")}
    "lexical" "syntax" SdfProduction*                                     -> Grammar            {cons("LexicalSyntax"), prefer}
    "context-free" "syntax" SdfProduction*                                -> Grammar            {cons("ContextFreeSyntax"), prefer}
    Sort "=" Symbols Attributes                                           -> SdfProduction      {cons("SdfProduction")}
    SortCons "=" Symbols Attributes                                       -> SdfProduction      {cons("SdfProductionWithCons")}
    Sort "=" Template Attributes                                          -> TemplateProduction {cons("TemplateProduction")}
    SortCons "=" Template Attributes                                      -> TemplateProduction {cons("TemplateProductionWithCons")}
    Sort "." IdCon                                                        -> SortCons           {cons("SortCons")}
    "<" Placeholder ">"                                                   -> TemplatePart1      {bracket}
    "[" Placeholder "]"                                                   -> TemplatePart2      {bracket}
    PlaceholderLabel PlaceholderSort PlaceholderSuffix PlaceholderOptions -> Placeholder        {cons("Placeholder")}
    Sort                                                                  -> PlaceholderSort    {cons("Sort")}
                                                                          -> PlaceholderLabel   {cons("None")}
    Label ":"                                                             -> PlaceholderLabel   {cons("Label")}
                                                                          -> PlaceholderSuffix  {cons("None")}
    "*"                                                                   -> PlaceholderSuffix  {cons("Star")}
    "+"                                                                   -> PlaceholderSuffix  {cons("Plus")}
    "?"                                                                   -> PlaceholderSuffix  {cons("Option")}
                                                                          -> PlaceholderOptions {cons("NoOptions")}
    ";" {PlaceholderOption ","}+                                          -> PlaceholderOptions {cons("Options")}
    "hide"                                                                -> PlaceholderOption  {cons("Hide")}
    "wrap"                                                                -> PlaceholderOption  {cons("Wrap")}
    "anchor"                                                              -> PlaceholderOption  {cons("Anchor")}
    "separator" "=" StrCon                                                -> PlaceholderOption  {cons("Separator")}
    "text" "=" StrCon                                                     -> PlaceholderOption  {cons("Text")}

  context-free syntax
    CONTENTCOMPLETE -> Section            {cons("COMPLETION-Section")}
    CONTENTCOMPLETE -> Grammar            {cons("COMPLETION-Grammar")}
    CONTENTCOMPLETE -> SdfProduction      {cons("COMPLETION-SdfProduction")}
    CONTENTCOMPLETE -> TemplateProduction {cons("COMPLETION-TemplateProduction")}
    CONTENTCOMPLETE -> SortCons           {cons("COMPLETION-SortCons")}
    CONTENTCOMPLETE -> TemplatePart1      {cons("COMPLETION-TemplatePart1")}
    CONTENTCOMPLETE -> TemplatePart2      {cons("COMPLETION-TemplatePart2")}
    CONTENTCOMPLETE -> Placeholder        {cons("COMPLETION-Placeholder")}
    CONTENTCOMPLETE -> PlaceholderSort    {cons("COMPLETION-PlaceholderSort")}
    CONTENTCOMPLETE -> PlaceholderLabel   {cons("COMPLETION-PlaceholderLabel")}
    CONTENTCOMPLETE -> PlaceholderSuffix  {cons("COMPLETION-PlaceholderSuffix")}
    CONTENTCOMPLETE -> PlaceholderOptions {cons("COMPLETION-PlaceholderOptions")}
    CONTENTCOMPLETE -> PlaceholderOption  {cons("COMPLETION-PlaceholderOption")}

  syntax
    "<" {<TemplateLine1-CF> "\n"}+ ">"   -> <Template-CF>      {cons("Template")}
    "<<" {<TemplateLine1-CF> "\n"}+ ">>" -> <Template-CF>      {cons("Template"), avoid, deprecated("Use single brackets to delimit the template")}
    <TemplatePart1-CF>*                  -> <TemplateLine1-CF> {cons("Line")}
    <TemplateString1-LEX>                -> <TemplatePart1-CF> {cons("String")}
    <TemplateEscape1-LEX>                -> <TemplatePart1-CF> {cons("Escape")}
    <TemplateLayout-LEX>                 -> <TemplatePart1-CF> {cons("Layout")}
    "[" {<TemplateLine2-CF> "\n"}+ "]"   -> <Template-CF>      {cons("Template")}
    "[[" {<TemplateLine2-CF> "\n"}+ "]]" -> <Template-CF>      {cons("Template"), avoid, deprecated("Use single brackets to delimit the template")}
    <TemplatePart2-CF>*                  -> <TemplateLine2-CF> {cons("Line")}
    <TemplateString2-LEX>                -> <TemplatePart2-CF> {cons("String")}
    <TemplateEscape2-LEX>                -> <TemplatePart2-CF> {cons("Escape")}
    <TemplateLayout-LEX>                 -> <TemplatePart2-CF> {cons("Layout")}
    '"' <TemplatePartQ-CF>* '"'          -> <Template-CF>      {cons("SingleLineTemplate")}
    <TemplateStringQ-LEX>                -> <TemplatePartQ-CF> {cons("String")}
    <TemplateEscapeQ-LEX>                -> <TemplatePartQ-CF> {cons("Escape")}
    <TemplateLayout-LEX>                 -> <TemplatePartQ-CF> {cons("Layout")}

  lexical syntax
    [\r] [\n]                           -> "\n"            
    [\ \t]+                             -> TemplateLayout  
    ( ~[\\\<\>\ \t\r\n] | Backslash1 )+ -> TemplateString1 
    ( ~[\\\[\]\ \t\r\n] | Backslash2 )+ -> TemplateString2 
    ~[\\\"\ \t]+                        -> TemplateStringQ 
    [\\]                                -> Backslash1      
    [\\]                                -> Backslash2      

  lexical restrictions
    TemplateLayout -/- [\ \t]
    TemplateString1 -/- ~[\\\<\>\ \t\r\n]
    TemplateString2 -/- ~[\\\[\]\ \t\r\n]
    TemplateStringQ -/- ~[\\\"\ \t]
    TemplateString1 -/- [\\] . ~[\<\>\\]
    TemplateString2 -/- [\\] . ~[\[\]\\]
    Backslash1 -/- [\<\>\\]
    Backslash2 -/- [\[\]\\]

  lexical syntax
    EscapedChar1+                                    -> TemplateEscape1       
    EscapedChar2+                                    -> TemplateEscape2       
    "\\<"                                            -> EscapedChar1          
    "\\>"                                            -> EscapedChar1          
    "\\\\"                                           -> EscapedChar1          
    "\\["                                            -> EscapedChar2          
    "\\]"                                            -> EscapedChar2          
    "\\\\"                                           -> EscapedChar2          
    "<" ( EscapedBackslashChar1 | EscapedChar )* ">" -> EscapedChar1          
    "<\\\\>" [\ \t\r]* [\n]                          -> EscapedChar1          
    "[" ( EscapedBackslashChar2 | EscapedChar )* "]" -> EscapedChar2          
    "[\\\\]" [\ \t\r]* [\n]                          -> EscapedChar2          
    "\\\\"                                           -> EscapedBackslashChar1 
    "\\\\"                                           -> EscapedBackslashChar2 
    ( "\\\\" | EscapedChar )+                        -> TemplateEscapeQ       
    "\\'"                                            -> EscapedChar           
    '\\"'                                            -> EscapedChar           
    "\\ "                                            -> EscapedChar           
    "\\t"                                            -> EscapedChar           
    "\\r"                                            -> EscapedChar           
    "\\n"                                            -> EscapedChar           
    "\\u" [0-9A-Fa-f]+                               -> EscapedUnicodeChar    
    EscapedUnicodeChar                               -> EscapedChar           
    "\\" ~[]                                         -> EscapedChar           {recover, cons("WATER")}
    "<" ~[\>]+ ">"                                   -> EscapedChar1          {recover, cons("WATER")}
    "[" ~[\]]+ "]"                                   -> EscapedChar2          {recover, cons("WATER")}

  lexical restrictions
    TemplateEscape1 -/- [\\]
    TemplateEscape1 -/- [\<] . [\\\>]
    TemplateEscape2 -/- [\\]
    TemplateEscape2 -/- [\[] . [\\\]]
    TemplateEscapeQ -/- [\\]
    EscapedBackslashChar1 -/- [\>]
    EscapedBackslashChar2 -/- [\]]
    EscapedUnicodeChar -/- [0-9A-Fa-f]