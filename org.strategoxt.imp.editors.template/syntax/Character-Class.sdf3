module Character-Class

imports Character

templates

CharRange = <<Character>>
CharRange.Range = <<start:Character> - <end:Character>>
CharRanges = <<CharRange>>
//"left":CharRanges "right":CharRanges        -> CharRanges   {cons("conc"),right,memo}
CharRanges.Conc = <<CharRanges> <CharRanges>> {right, memo}
CharRanges = <(<CharRanges>)> {bracket}

OptCharRanges.Absent = <>
OptCharRanges.Present = < <CharRanges> >
 
CharClass.Simple = < [ <OptCharRanges> ] >
CharClass.Comp = <~<CharClass>>
//"left":CharClass "/" "right":CharClass   -> CharClass  {cons("diff"),left,memo}
CharClass.Diff = < <CharClass> / <CharClass> > {left, memo}
//"left":CharClass "/\\" "right":CharClass -> CharClass  {cons("isect"),left,memo}
CharClass.Isect = < <CharClass> /\\ <CharClass> > {left, memo}
//"left":CharClass "\\/" "right":CharClass -> CharClass  {cons("union"),left}
ClarClass.Union = < <CharClass> \\/ <CharClass> > {left}
CharClass = < (<CharClass>) > {bracket, avoid}

context-free priorities
	CharClass.Comp > CharClass.Diff,
	CharClass.Diff > CharClass.Isect
	//,CharClass.Isect > CharClass.Union
	
	// "~" CharClass             -> CharClass >
    //CharClass "/" CharClass   -> CharClass >
    //CharClass "/\\" CharClass -> CharClass >
    //CharClass "\\/" CharClass -> CharClass  