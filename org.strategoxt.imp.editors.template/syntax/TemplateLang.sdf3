module TemplateLang 
imports
  sdf2-core/SDF
  constants/StrCon
  sorts/Sorts
  symbols/Symbols
  labels/Labels
  constants/IdentifierCon
  kernel/Kernel
  restrictions/Restrictions
  priority/Priority
  basic/Basic
  modules/Modules

context-free start-symbols
    Module

context-free syntax
//tweaks for content completion
TemplateProduction.WATER = <<CONTENTCOMPLETE>> {recover}
PlaceholderOption.WATER = <<CONTENTCOMPLETE>> {recover}
PlaceholderOptions.WATER = <<CONTENTCOMPLETE>> {recover} 

context-free syntax
//options section
Section.TemplateOptions = <
	template options 
	
		<{TemplateOption "\n"}*>
	
	>

TemplateOption.Newlines = <newlines : <NewlineOptionValue>>
 
NewlineOptionValue.None = <none>
NewlineOptionValue.Leading = <leading>
NewlineOptionValue.Trailing = <trailing>
NewlineOptionValue.Separating = <separating>

TemplateOption.KeywordFollowRestriction = <keyword -/- <Lookaheads>>

TemplateOption.Tokenize = <tokenize : <StrCon>>

context-free syntax
//references to productions using sort.cons notation in priority specification
Group.SimpleRefGroup = <<SortConsRef>>
Group.ProdsRefGroup = <{<{SortConsRef "\n"}+>}>
Group.AssocRefGroup = <
	{<Associativity> :
		<{SortConsRef "\n"}+>}>
SortConsRef.SortConsRef = <<Symbol>.<Constructor>>

context-free syntax 
//grammars
Section.TemplateSection = <
	templates 
	
		<{TemplateProduction "\n"}*>
	
	> {deprecated("Use context-free syntax section instead")}

Grammar.LexicalSyntax = <
	lexical syntax 
	
		<{SdfProduction "\n"}*>
	
	> {prefer}
	
Grammar.ContextFreeSyntax = <
	context-free syntax 
	
		<{GeneralProduction "\n"}*>
	
	> {prefer}
	
Grammar.Kernel = <
	syntax 
	
		<{SdfProduction "\n"}*>
	
	> {prefer}
	
GeneralProduction = <<SdfProduction>>
GeneralProduction = <<TemplateProduction>> {prefer}


// syntactic sugar for SDF
SdfProduction.SdfProduction = <<SymbolDef> = <RHS> <Attributes>> 
SdfProduction.SdfProductionWithCons = <<SortCons> = <RHS> <Attributes>>
RHS.Rhs = <<Symbols>>

// template productions
TemplateProduction.TemplateProduction = <<SymbolDef> = <Template> <Attributes>>

// template productions Sort.Cons = ...
TemplateProduction.TemplateProductionWithCons = <<SortCons> = <Template> <Attributes>>

Constructor.Constructor = <<IdCon>>

SortCons.SortCons = <<SymbolDef>.<Constructor>>

 
// placeholders
TemplatePart1.Angled = <\<<Placeholder>\>>
TemplatePart2.Squared = <[<Placeholder>]>


//Old Placeholder Style
//Placeholder.Placeholder = <<PlaceholderLabel> <PlaceholderSort> <PlaceholderSuffix> <PlaceholderOptions>>

//PlaceholderSort.Sort = <<Sort>>

//PlaceholderLabel.None = <>
//PlaceholderLabel.Label = <<Label>:>
 
// PlaceholderSuffix.None = <>
// PlaceholderSuffix.Star = <*>
// PlaceholderSuffix.Plus = <+>
// PlaceholderSuffix.Option = <?>

Placeholder.Placeholder = <<Symbol><PlaceholderOptions>>



PlaceholderOptions.NoOptions = <>
PlaceholderOptions.Options = <;<{PlaceholderOption ", "}+>>

PlaceholderOption.Hide = <hide>
PlaceholderOption.Wrap = <wrap>
PlaceholderOption.Anchor = <anchor>
//mark as deprecated
PlaceholderOption.Separator = <separator=<StrCon>> {deprecated("Use list with separator symbol instead")}
PlaceholderOption.Text = <text=<StrCon>>
 
// syntax
//     %% template parts
//     "<" {<TemplateLine1-CF> "\n"}+ ">" -> <Template-CF> {cons("Template")}
//     "<<" {<TemplateLine1-CF> "\n"}+ ">>" -> <Template-CF> {cons("Template"), avoid, deprecated("Use single brackets to delimit the template")}
//     <TemplatePart1-CF>* -> <TemplateLine1-CF> {cons("Line")}
//     <TemplateString1-LEX> -> <TemplatePart1-CF> {cons("String")}
//     <TemplateEscape1-LEX> -> <TemplatePart1-CF> {cons("Escape")}
//     <TemplateLayout-LEX>  -> <TemplatePart1-CF> {cons("Layout")}
// 
//     "[" {<TemplateLine2-CF> "\n"}+ "]" -> <Template-CF> {cons("Template")}
//     "[[" {<TemplateLine2-CF> "\n"}+ "]]" -> <Template-CF> {cons("Template"), avoid, deprecated("Use single brackets to delimit the template")}
//     <TemplatePart2-CF>* -> <TemplateLine2-CF> {cons("Line")}
//     <TemplateString2-LEX> -> <TemplatePart2-CF> {cons("String")}
//     <TemplateEscape2-LEX> -> <TemplatePart2-CF> {cons("Escape")}
//     <TemplateLayout-LEX>  -> <TemplatePart2-CF> {cons("Layout")}
// 
//     %% special: no placeholders, no newlines
//     '"' <TemplatePartQ-CF>* '"' -> <Template-CF> {cons("SingleLineTemplate")}
//     <TemplateStringQ-LEX> -> <TemplatePartQ-CF> {cons("String")}
//     <TemplateEscapeQ-LEX> -> <TemplatePartQ-CF> {cons("Escape")}
//     <TemplateLayout-LEX>  -> <TemplatePartQ-CF> {cons("Layout")}
  
  syntax
  
  
  Template-CF.Template = "<" {TemplateLine1-CF "\n"}+ ">"
  Template-CF.TemplateDeprecated =  "<<" {TemplateLine1-CF "\n"}+ ">>" {avoid, deprecated("Use single brackets to delimit the template")}
  TemplateLine1-CF.Line = TemplatePart1-CF* 
  TemplatePart1-CF.String = TemplateString1-LEX
  TemplatePart1-CF.Escape = TemplateEscape1-LEX
  TemplatePart1-CF.Layout = TemplateLayout-LEX 
  
  Template-CF.TemplateSquare = "[" {TemplateLine2-CF "\n"}+ "]"
  Template-CF.TemplateSquareDeprecated = "[[" {TemplateLine2-CF "\n"}+ "]]" {avoid, deprecated("Use single brackets to delimit the template")}
  TemplateLine2-CF.Line = TemplatePart2-CF* 
  
  TemplatePart2-CF.String =  TemplateString2-LEX 
  
  TemplatePart2-CF.Escape = TemplateEscape2-LEX
  TemplatePart2-CF.Layout = TemplateLayout-LEX
   
 // Template-CF.SingleLineTemplate = '"' TemplatePartQ-CF* '"'
 // TemplatePartQ-CF.String = TemplateStringQ-LEX
 // TemplatePartQ-CF.Escape = TemplateEscapeQ-LEX
 // TemplatePartQ-CF.Layout = TemplateLayout-LEX
   
  
  
  
  
  lexical syntax
  
  	EOL = LF
  	EOL = CR
  	EOL = CR LF
  	
  	CR = [\r]
  	LF = [\n]
  	
    "\n" = EOL
  
  lexical restrictions
  
    EOL -/- [\n\r]
      
  
  lexical syntax
    
    TemplateLayout =  [\ \t]+
    
    TemplateString1 = TemplateString1Alt+
    TemplateString2 = TemplateString2Alt+
	TemplateStringQ =  ~[\\\"\ \t]+   
    TemplateString1Alt = ~[\\\<\>\ \t\r\n]
    TemplateString2Alt = ~[\\\[\]\ \t\r\n] 
    TemplateString2Alt = Backslash

	Backslash = [\\] 
    // [\\] -> Backslash1
    // [\\] -> Backslash2      => [\\] -> Backslash

  lexical restrictions
    TemplateLayout -/- [\ \t]

    %% must be followed by:
    TemplateString1 -/- ~[\\\<\>\ \t\r\n]
    TemplateString2 -/- ~[\\\[\]\ \t\r\n]
    TemplateStringQ -/- ~[\\\"\ \t]

    %% if followed by a backslash, then the backslash must be followed by:
    TemplateString1 -/- [\\].~[\<\>\\]
    TemplateString2 -/- [\\].~[\[\]\\]

    Backslash -/- [\<\>\\]

  template options
  
  	tokenize : "="  

  lexical syntax
  //production for ContenteCompletion
  CONTENTCOMPLETE = [a-zA-Z]* "CONTENTCOMPLETE" [0-9]+  {avoid}
  
  //combine sequences of escaped chars
  TemplateEscape1 = EscapedChar1+
  TemplateEscape2 = EscapedChar2+
  
  //this are the escapes which StringTemplate has
  EscapedChar1 = "\\<"
  EscapedChar1 = "\\>"
  EscapedChar1 = "\\\\"
  EscapedChar2 = "\\["
  EscapedChar2 = "\\]"
  EscapedChar2 = "\\\\"
  
   //EscapedChar1 = "<" (EscapedBackslashChar1 | EscapedChar)* ">"
   EscapedChar1 = "<" EscapedChar1Alt* ">"
   EscapedChar1Alt = EscapedBackslashChar1
   EscapedChar1Alt = EscapedChar
   
   EscapedChar1 = "<\\\\>" [\ \t\r]* [\n]
   
   //EscapedChar2 = "[" (EscapedBackslashChar2 | EscapedChar)* "]"
   EscapedChar2 = "[" EscapedChar2Alt* "]"
   EscapedChar2Alt = EscapedBackslashChar2 
   EscapedChar2Alt = EscapedChar
   EscapedChar2 = "[\\\\]" [\ \t\r]* [\n]

    // double-backslash isn't allowed as sole member of escape placeholder
    // (would clash with <\\> / [\\] line continuation construct)
    // so we add follow restrictions to the following symbols:
   EscapedBackslashChar1 = "\\\\"
   EscapedBackslashChar2 = "\\\\"
   
   TemplateEscapeQ = TemplateEscapeQAlt+
   TemplateEscapeQAlt = EscapedChar
   TemplateEscapeQAlt = "\\\\"
   
   //escapes allowed in a placeholder-like construct
   EscapedChar = "\\'"
   EscapedChar = '\\"'
   EscapedChar =  "\\ "
   EscapedChar =  "\\t"
   EscapedChar =  "\\r"
   EscapedChar =  "\\n"
    
    
    
    EscapedUnicodeChar = "\\u" [0-9A-Fa-f]+ 
    EscapedChar = EscapedUnicodeChar
    
    EscapedChar.WATER = "\\" ~[] {recover}
    EscapedChar1.WATER = "<" ~[\>]+ ">" {recover}
    EscapedChar2.WATER = "[" ~[\]]+ "]" {recover}


  lexical restrictions
    TemplateEscape1 -/- [\\]
    TemplateEscape1 -/- [\<].[\\\>]
    TemplateEscape2 -/- [\\]
    TemplateEscape2 -/- [\[].[\\\]]
    TemplateEscapeQ -/- [\\]
    EscapedBackslashChar1 -/- [\>]
    EscapedBackslashChar2 -/- [\]]
    EscapedUnicodeChar -/- [0-9A-Fa-f]
