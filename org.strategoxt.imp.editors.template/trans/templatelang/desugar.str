module desugar
imports
  libstratego-lib
  include/TemplateLang
  templatelang/utils/attributes
  templatelang/utils/contract
  templatelang/utils/misc

signature
  constructors
    Desugared : Term -> Term

strategies

  // Copied & renamed to prevent clashes with editor-common.generated.str
  // templatelang-origin-track-forced, which is present in all editors ...
  templatelang-origin-track-forced(s) =
    ![<id>]; all(s); ?[<id>]

strategies

  templatelang-desugar-sdf-top =
    alltd(templatelang-origin-track-forced(templatelang-desugar-sdf))

  templatelang-desugar-top =
    alltd(templatelang-origin-track-forced(templatelang-desugar))

rules

  templatelang-desugar-sdf:
    SdfProduction(sort, symbol*, attr*) ->
      prod(symbol*, sort(sort), attr*)

  templatelang-desugar-sdf:
    SdfProductionWithCons(SortCons(sort, cons), symbol*, attrs(attr*)) ->
      prod(symbol*, sort(sort), attrs(attr'*))
    where with-spxverify(
      attr'* := [sdf-cons(<double-quote> cons) | attr*]
    )

  templatelang-desugar-sdf:
    SdfProductionWithCons(SortCons(sort, cons), symbol*, no-attrs()) ->
      prod(symbol*, sort(sort), attrs(attr'*))
    where with-spxverify(
      attr'* := [sdf-cons(<double-quote> cons)]
    )

rules

  templatelang-desugar:
    TemplateProduction(sort, template, a) ->
      Desugared(TemplateProduction(sort, template', attrs(attr*)))
    where
      with-spxverify(
        template' := <templatelang-origin-track-forced(templatelang-template-desugar)> template;
        attr*     := <templatelang-get-attrs> a
      )

  templatelang-desugar:
    TemplateProductionWithCons(SortCons(sort, cons), template, a) ->
      Desugared(TemplateProduction(sort, template', attrs(attr*)))
    where
      with-spxverify(
        template' := <templatelang-origin-track-forced(templatelang-template-desugar)> template;
        attr*     := [sdf-cons(<double-quote> cons) | <templatelang-get-attrs> a]
      )

  templatelang-get-attrs =
    (no-attrs() -> []) + ?attrs(<id>)

  templatelang-template-desugar:
    SingleLineTemplate(elem*) -> SingleLineTemplate(elem'*)
    where with-spxverify(
      elem'* := <templatelang-element-desugar-top> elem* )

  templatelang-template-desugar:
    Template([Line(elem*)]) -> SingleLineTemplate(elem'*)
    where with-spxverify(
      elem'* := <templatelang-element-desugar-top> elem* )

  templatelang-template-desugar:
    Template(line*) -> Template(line'*)
    where
      not(!line* => [_])
    where with-spxverify(
      let line-is-empty =
            ?Line([]) + ?Line([Layout(_)])

          remove-head-if-empty =
            try(\[<line-is-empty> | t] -> t\)

          remove-last-if-empty =
            try(at-last(\[<line-is-empty>] -> []\))

          line-remove-trailing-layout =
            try(Line(at-last(\[Layout(_)] -> []\)))

          line-ensure-leading-layout =
            ?Line([Layout(_) | _]) <+ Line(![Layout("") | <id>])

          line-get-indent =
            // Only non-blank lines matter.
            ?Line([Layout(<string-length>), _ | _])

          get-indent =
            filter(line-get-indent);
            list-min

          string-unindent(|n) =
            ?"" <+ templatelang-origin-track-forced(string-as-chars(drop(|n)))

          line-unindent(|n) =
            Line([templatelang-origin-track-forced(Layout(string-unindent(|n))) | id])

          unindent =
            if get-indent => n then
              map(line-unindent(|n))
            end
      in
        !line*;
        remove-head-if-empty;
        remove-last-if-empty;
        templatelang-element-desugar-top;
        map(line-remove-trailing-layout; line-ensure-leading-layout);
        unindent;
        ?line'*
      end )

  templatelang-element-desugar-top =
    alltd(templatelang-origin-track-forced(templatelang-element-desugar))

  templatelang-element-desugar:
    NoOptions() -> []

  templatelang-element-desugar:
    Options(x) -> <alltd(templatelang-origin-track-forced(templatelang-option-desugar))> x

  templatelang-option-desugar:
    Separator(x) -> Separator(<templatelang-origin-track-forced(un-double-quote; unescape)> x)

  templatelang-option-desugar:
    Text(x) -> Text(<templatelang-origin-track-forced(un-double-quote; unescape)> x)

  templatelang-element-desugar:
    Escape(t) -> String(t')
    where with-spxverify(
      let parse-unicode =
            {before*, mid, after*:
               split-fetch-keep(not(is-hexnum)) => (before*, mid, after*);
               ![<hex-chars-to-int> before*, mid | after*]
            <+ ![<hex-chars-to-int>]
            }

          unescape =
            string-as-chars(rec x(
               \['\', ' ' | tail] -> [' '  | <x> tail]\
            <+ \['\', '\' | tail] -> ['\'  | <x> tail]\
            <+ \['\', '"' | tail] -> ['"'  | <x> tail]\
            <+ \['\', '\''| tail] -> ['\'' | <x> tail]\
            <+ \['\', 't' | tail] -> ['\t' | <x> tail]\
            <+ \['\', 'r' | tail] -> ['\r' | <x> tail]\
            <+ \['\', 'n' | tail] -> ['\n' | <x> tail]\
            <+ \['\', '<' | tail] -> ['<'  | <x> tail]\
            <+ \['\', '>' | tail] -> ['>'  | <x> tail]\
            <+ \['\', '[' | tail] -> ['['  | <x> tail]\
            <+ \['\', ']' | tail] -> [']'  | <x> tail]\
            <+ \['\', 'u' | tail] -> <parse-unicode; [id | x]> tail\
            <+ \['<', '\', '\', '>' | tail] -> <x> tail\
            <+ \['[', '\', '\', ']' | tail] -> <x> tail\
            <+ \[_ | tail] -> <x> tail\
            <+ []
            ))
      in
        t' := <templatelang-origin-track-forced(unescape)> t
      end
      )

  templatelang-element-desugar:
    Layout(t) -> Layout(t')
    where with-spxverify(
      t' := <templatelang-origin-track-forced(string-replace(|"\t", "  "))> t
     )


rules

  templatelang-desugar:
    Desugared(_) -> <id>
    where
      <debug> "Warning: Attempt to desugar already desugared template production!"

  // We add a special marker to productions to make it easier
  // to bail out early in strategies that expect desugared input.

  templatelang-is-desugared-production:
    Desugared(TemplateProduction(_, _, _)) -> <id>

  templatelang-not-desugared(|verb) =
    ( ?TemplateProduction(_, _, _)
      + ?TemplateProductionWithCons(_, _, _)
      + ?SdfProduction(_, _, _)
      + ?SdfProductionWithCons(_, _, _) );
    <debug> $[Error: Attempt to [verb] sugared template production!];
    fail
