module editor/builders

imports
  
  libstrc
  libstratego-sdf
  libstratego-gpp
  lib/sdf-desugar
  lib/sdf-parenthesize
  lib/EditorService
  include/TemplateLang

  editor-common.generated
  
  runtime/index/-
  runtime/task/-
  trans/generation/-
  
 
  
  
  rules
  	
  generate-sdf-abstract:
    (selected, position, ast, path, project-path)	-> (filename, result)
    with
    	task-setup(|project-path);
    	index-setup(|<language>, project-path);
    	<?Module(Unparameterized(mn), i*, sections)> ast ;
    	chars := <collect-one(?Tokenize(<id; explode-string; un-double-quote-chars>)) <+ !['(', ')']> sections;
  		newline := <collect-one(?Newlines(<id>)) <+ !None()> sections;
  		kfr := <collect-one(?KeywordFollowRestriction(<id; term-translation>)) <+ !None()> sections;
    	filename := <create-src-gen(|project-path, "syntax",  ".sdf.aterm")> mn;
    	result := <to-sdf(|chars, newline, kfr)> selected
    	  	 	
  generate-sdf-concrete:
    (selected, position, ast, path, project-path) -> (filename, result)
   with
    	task-setup(|project-path);
    	index-setup(|<language>, project-path);
       <?Module(Unparameterized(mn), i*, sections)> ast ;
     	chars := <collect-one(?Tokenize(<id; explode-string; un-double-quote-chars>)) <+ !['(', ')']> sections;
  		newline := <collect-one(?Newlines(<id>)) <+ !None()> sections;
  		kfr := <collect-one(?KeywordFollowRestriction(<id; term-translation>)) <+ !None()> sections;
        filename := <create-src-gen(|project-path, "syntax", ".sdf")> mn;
       result   := <to-sdf(|chars, newline, kfr); pp-sdf-to-string> selected
 
  
  generate-sig-abstract:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
    	task-setup(|project-path);
    	index-setup(|<language>, project-path);
    	<?Module(Unparameterized(mn), i*, _)> ast ;
    	result   := <module-to-sig> selected
      ; filename := <create-src-gen(|project-path, "signatures", ".sig.aterm")> mn
  
  
  
  generate-sig-concrete:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
    	task-setup(|project-path);
    	index-setup(|<language>, project-path);
    	<?Module(Unparameterized(mn), i*, _)> ast ;
    	result   := <module-to-sig; (pp-stratego-string <+ debug(!"pp-stratego-string failed");fail)> selected
      ; filename := <create-src-gen(|project-path, "signatures", "-sig.str")> mn
   
   generate-pp-abstract:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
    	task-setup(|project-path);
    	index-setup(|<language>, project-path);
    	<?Module(Unparameterized(mn), i*, _)> ast ;
    	result   :=  <module-to-pp> selected
      ; filename := <create-src-gen(|project-path, "pp", ".pp.aterm")> mn 	
  
   generate-pp-concrete:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
    	task-setup(|project-path);
    	index-setup(|<language>, project-path);
    	<?Module(Unparameterized(mn), i*, _)> ast ;
    	result   := <module-to-pp; pp-stratego-string <+ bottomup(try(not(pp-stratego-string); debug(!"cannot pp ")))> selected
      ; filename := <create-src-gen(|project-path, "pp", "-pp.str")> mn
  
  
  generate-esv-abstract:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
    	task-setup(|project-path);
    	index-setup(|<language>, project-path);
    	<?Module(Unparameterized(mn), i*, _)> ast ;
    	result   :=  <module-to-esv; topdown(try(pp-fix-string-quotes))> selected
      ; filename := <create-src-gen(|project-path, "completions", ".esv.aterm")> mn 	
  
   generate-esv-concrete:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
    	task-setup(|project-path);
    	index-setup(|<language>, project-path);
    	<?Module(Unparameterized(mn), i*, sections)> ast ;
    	result   := <module-to-esv; pp-esv-to-string <+ bottomup(try(not(pp-esv-to-string); debug(!"cannot pp ")))> selected
      ; filename := <create-src-gen(|project-path, "completions" ,"-esv.esv")> mn
  
  // On-save handler
  generate-all:
    (selected, position, ast, path, project-path) -> <id> 
    with
    	filename := <base-filename> path;
    	debug(!"generating for ")
    with
      generate-esv-concrete; write-string-to-file
    with
   	 generate-sig-concrete; write-string-to-file
    with
     generate-sdf-concrete; write-string-to-file
    with
      generate-pp-concrete; write-string-to-file
	
  
  rules
  
  
  //pretty-printer for the generated sdf
  pp-sdf-to-string =
  sdf-desugar;
  parenthesize-Sdf2;
  sdf-ppfix;
  ast2box(|[<pp-table-sdf>, PP-Table([PP-Entry(Path1("Constructor"),[Arg("1")])])]);
  box2text-string(|80)
  
  
  //pretty-printer for the generated esv
  pp-esv-to-string = 
  	topdown(try(pp-fix-string-quotes));
    ast2box(|[<esv-pp-table>]);
    box2text-string(|80)
    
  pp-fix-string-quotes:
    String(string) -> String(string')
    where
      <not(string-starts-with(|"\""))> string
    with
      string' := <conc-strings> ("\"", string, "\"")
  
  pp-fix-string-quotes:
    Placeholder(string) -> Placeholder(string')
    where
      <not(string-starts-with(|"<"))> string
    with
      string' := <conc-strings> ("<", string, ">")  
    
  esv-pp-table =
    DescriptorPPTable
  <+
    tbl := <import-term(include/EditorService-pretty.pp.af)>;
    rules(DescriptorPPTable := tbl)
    
    

  // When given a tuple (path, string) this writes string into path.
  write-string-to-file =
  	?(filename, string);
  	if <dirname; readdir> filename then
	    with(
	      handle := <fopen> (filename, "w");
	      <fputs> (string, handle);
	      <fclose> handle;
	      <refresh-workspace-file> filename
	    )
	  end
	  
  create-src-gen(|project-path, folder, ext):
  	filename -> filename'
  with
  	fn := <get-filename> filename; 
  	src-gen-path := <concat-strings; create-dir> [project-path, "/src-gen"];
  	src-gen-folder := <concat-strings; create-dir> [src-gen-path, "/" ,folder];
  	file-folder := <get-dir(|src-gen-folder)> filename ;
  	filename' := <concat-strings> [file-folder, "/" , fn, ext]
  	//;debug(!"filename' ")
 	
  	
  	
  	
  	//<write-string-to-file> (filename', string)		
 	
 	// dir := <get-dir> filename;
  // 	debug(!"dir ");
  // 	src-gen-path := <concat-strings> [project-path, "/src-gen/", dir];
  // 	debug(!"src-gen-path ");
  // 	  if <not( file-exists ; filemode ; isdir)> src-gen-path
  // 	  then
  // 	  	<mkdir> src-gen-path
  // 	  end;
  
    get-dir(|path) :
 		s -> s'
 		with
 			names := <strip-annos; string-tokenize(|['/'])> s;
 			names' := <at-last(![])> names;
 		//	debug(!"names ");
 			if [h | tl] := names'
 			then 			
	 			first := <concat-strings> [path, "/" ,h]; 
	 		//	debug(!"get-dir ");
	 			<create-dirs(|first)> tl;
	 		//	debug(!"create-dirs ");
	 			s' := <concat-strings> [path, "/",  <at-last(separate-by(|"/")); concat-strings> names']
 		    else
 		    	s' := path
 		    end
 			
   
   create-dir  = not( file-exists ; filemode ; isdir) < mkdir + id
   
   create-dirs(|dir):
   	[h | tl] -> None()
   	where
   		<create-dir> dir;
	   	new-dir := <concat-strings> [dir, "/", h];
	 //  	debug(!"create-dirs new dir ");
	   	<create-dirs(|new-dir)> tl
   	
   	create-dirs(|dir):
   	[] -> None()
   	where
   		<create-dir> dir
   	//	; debug(!"create-dirs empty ")
  
 	get-filename :
 		s -> s'
 		with
 			names := <strip-annos; string-tokenize(|['/'])> s;
 			//debug(!"names ");
 			s' := <last> names
 			
 	// get-dir :
 	// 	s -> s'
 	// 	with
 	// 		names := <strip-annos; string-tokenize(|['/'])> s;
 	// 		names' := <at-last(![])> names;
 	// 		s' := <concat-strings> names'
 	// 		//;debug(!"dirnms ")
 			
 			
  	
  