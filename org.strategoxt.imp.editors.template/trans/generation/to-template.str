module to-template

imports
  libstratego-sglr
  include/TemplateLang
  analysis/desugar
  

rules // Convert regular productions to desugared syntax templates
	
	prod-to-template:
		SdfProductionWithCons(SortCons(SortDef(s), c), Rhs(symbols*), Attrs(a*)) ->
		TemplateProductionWithCons(SortCons(SortDef(s), c), SingleLineTemplate(elem*), Attrs(a*))
	with
		elem* := <map(symbol-to-elem);
                separate-by(|Layout(" "))> symbols*
    
    prod-to-template:
		SdfProduction(SortDef(s), Rhs(symbols*), Attrs(a*)) ->
		TemplateProduction(SortDef(s), SingleLineTemplate(elem*), Attrs(a*))
	with
		elem* := <map(symbol-to-elem);
                separate-by(|Layout(" "))> symbols*            
    
    
    cf-prod-to-template:
    	SdfProduction(Cf(SortDef(s)), Rhs(symbols*), Attrs(a*)) -> 
    		TemplateProduction(SortDef(s), SingleLineTemplate(elem*), Attrs(a*))
    with
    	elem* := <map(symbol-to-elem)> symbols*
    	//;debug(!"a")
    
    cf-prod-to-template:
    	SdfProductionWithCons(SortCons(Cf(SortDef(s)), c), Rhs(symbols*), Attrs(a*)) -> 
    		TemplateProductionWithCons(SortCons(SortDef(s), c), SingleLineTemplate(elem*), Attrs(a*))
    with
    	elem* := <map(symbol-to-elem)> symbols*
    	//; debug(! "b")
    
    symbol-to-elem:
    	<Cf(Layout()) + Lex(Layout())> -> Layout(" ")
    	
    symbol-to-elem:
    	Lex(s) -> <symbol-to-elem> s
    
    symbol-to-elem:
    	Cf(s) -> <symbol-to-elem> s
    
     symbol-to-elem:
	 	Opt(<?Lex(t@Sort(_)) + ?Cf(t@Sort(_))>) -> Placeholder(Opt(t), [])
	 
	 symbol-to-elem:
	 	IterStar(<?Lex(t@Sort(_)) + ?Cf(t@Sort(_))>) -> Placeholder(IterStar(t), [])
	 
	 symbol-to-elem:
	 	Iter(<?Lex(t@Sort(_)) + ?Cf(t@Sort(_))>) -> Placeholder(Iter(t), [])
	 
	 symbol-to-elem:
    	IterStarSep(<?Lex(t@Sort(_)) + ?Cf(t@Sort(_))>, Lit(s)) -> Placeholder(IterStarSep(t, Lit(s)), [])
 //    with
 //      	s' := <un-double-quote; unescape> s
	// 
	symbol-to-elem:
		IterSep(<?Lex(t@Sort(_)) + ?Cf(t@Sort(_))>, Lit(s)) -> Placeholder(IterSep(t, Lit(s)), [])
	// with
	// 	s' := <un-double-quote; unescape> s
        
    
	symbol-to-elem:
   		Lit(t) -> String(<un-double-quote; unescape> t)
	
	symbol-to-elem:
		CiLit(s) -> String(<un-single-quote> s)
	
	 symbol-to-elem:
     	t@Sort(_) -> Placeholder(t, [])
     
     symbol-to-elem:
	 	opt@Opt(Sort(_)) -> Placeholder(opt, [])
	 	 
	 symbol-to-elem:
	 	iterstar@IterStar(Sort(_)) -> Placeholder(iterstar, [])
	 
	 symbol-to-elem:
	 	iter@Iter(Sort(_)) -> Placeholder(iter, [])
	
	 symbol-to-elem:
    	iterStarSep@IterStarSep(Sort(_), Lit(s)) -> Placeholder(iterStarSep, [])
     with
       	s' := <un-double-quote; unescape> s
	 
	 symbol-to-elem:
	 	iterSep@IterSep(Sort(_), Lit(_)) -> Placeholder(iterSep, [])
	 // with
	// 	s' := <un-double-quote; unescape> s
	// 	

  