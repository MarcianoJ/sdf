module analysis/name-constraints

imports

  include/TemplateLang-sig
  analysis/names
  libstrc
  runtime/nabl/-
  runtime/task/-
  runtime/types/-
  analysis/types
  
  strategies
  	
  	nabl-check-disable-duplicate(|uri, ns) = id
  	nabl-check-disable-unresolved = id
  	
  	rules

  	nabl-constraint(|ctx):
    t@Term(Default(Appl(Unquoted("cons"), [Fun(Quoted("\"Nil\""))]))) -> <fail>
    where
      msg := "In Stratego, Nil is the empty list, and Nil() does not match this constructor (use a different constructor name)";
      <task-create-error(|ctx, msg)> t

  	nabl-constraint(|ctx):
    t@Term(Default(Appl(Unquoted("cons"), [Fun(Quoted("\"Cons\""))]))) -> <fail>
    where
      msg := "In Stratego, Cons is the list constructor, and Cons(_) does not match this constructor (use a different constructor name)";
      <task-create-error(|ctx, msg)> t
  	
  	
  	nabl-constraint(|ctx):
  		sc@SortConsRef(Sort(s), Constructor(c)) -> <fail>
  		where
  			<has-annotation(?Use(task))> c;
  			msg := $[Unresolved reference to constructor '[c]' of sort '[s]'];
  			<task-create-error-on-triggers(|ctx, [Failure(task)], msg)> sc
  	
  	nabl-constraint(|ctx):
  		sc@SortConsRef(Cf(Sort(s)), Constructor(c)) -> <fail>
  		where
  			<has-annotation(?Use(task))> c;
  			msg := $[Unresolved reference to constructor '[c]' of sort '[s]'];
  			<task-create-error-on-triggers(|ctx, [Failure(task)], msg)> sc
  	
  	nabl-constraint(|ctx):
  		sc@SortConsRef(Lex(Sort(s)), Constructor(c)) -> <fail>
  		where
  			<has-annotation(?Use(task))> c;
  			msg := $[Unresolved reference to constructor '[c]' of sort '[s]'];
  			<task-create-error-on-triggers(|ctx, [Failure(task)], msg)> sc
  	
  	
  	
  	nabl-constraint(|ctx):
  		Module(Unparameterized(m)) -> <fail>
  		where
  		<has-annotation(?Use(task))> m;
  		msg := $[Unresolved reference to module '[m]'];
  		<task-create-error-on-triggers(|ctx, [Failure(task)], msg)> m
  					
  	nabl-constraint(|ctx):
  		 Sort(s) -> <fail>
  		where
  			<has-annotation(?Use(task))> s;
  			msg := $[Unresolved reference to sort '[s]'];
  			<task-create-error-on-triggers(|ctx, [Failure(task)], msg)> s
  	
  	
  	nabl-constraint(|ctx):
  		TemplateProductionWithCons(SortCons(s, Constructor(c)), template, attrs) -> <fail>
  		where
  			type       := <type-lookup(|ctx)> c;
  			lookup     := <nabl-lookup-lexical(|ctx)> c;
  			cons-types := <type-lookup(|ctx)> lookup;
  			same-types := <task-create-rewrite(|ctx, "match-sort-type")> (type, cons-types);
  			<task-create-error-on-triggers(|ctx, [Multiple(same-types)], $[Duplicated definition for constructor [c]])> c
  			
  	
  	
  			
    nabl-constraint(|ctx):
  		SdfProductionWithCons(SortCons(s, Constructor(c)), rhs, attrs) -> <fail>
  		where
  			type       := <type-lookup(|ctx)> c;
  			lookup     := <nabl-lookup-lexical(|ctx)> c;
  			cons-types := <type-lookup(|ctx)> lookup;
  			same-types := <task-create-rewrite(|ctx, "match-sort-type")> (type, cons-types);
  			<task-create-error-on-triggers(|ctx, [Multiple(same-types)], $[Duplicated definition for constructor [c]])> c

		
	task-rewrite:
  	  ("match-sort-type", (e@FunType(ty*, SortType(s)), a@FunType(ty'*, SortType(s')))) -> a
  	  where
  	  	<?s> s';
  	  	<eq> (<length> ty*, <length> ty'*)
