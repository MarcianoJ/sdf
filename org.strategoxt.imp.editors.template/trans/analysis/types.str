module analysis/types

imports 
  include/TemplateLang
  libstrc
  runtime/types/collect

imports
  
  lib/runtime/nabl/-
  lib/runtime/task/-
  lib/runtime/types/-
  lib/runtime/properties/-
  lib/runtime/relations/-
  analysis/name-constraints

  
signature
  constructors
  	
  	Inj : Constructor

overlays
  
  SortType(t)    = ConstType(SortNoArgs(t))
  OptionType(t)  = ConstType(Sort("Option", [SortNoArgs(t)]))
  ListType(t)    = ConstType(Sort("List", [SortNoArgs(t)]))
 


rules
  
  create-type-task(|ctx) =
    ?SingleLineTemplate(<filter(?Placeholder(_, _, _, _)); map(create-type-task(|ctx))>)//; debug(!"singleline")
  ; type-is(|ctx)
    
  create-type-task(|ctx) =
    ?Template(<mapconcat(?Line(<filter(?Placeholder(_, _, _, _)); map(create-type-task(|ctx))>))>)//; debug(!"multiline")
  ; type-is(|ctx)
    
  create-type-task(|ctx) :
    Placeholder(_, Sort(s), Option(), _) -> <task-create-id(|ctx,[t])> t
    where 
      t := <type-is(|ctx)> OptionType(<strip-annos> s)    
  
  create-type-task(|ctx) :
   Placeholder(_, Sort(s), Plus(), _) -> <task-create-id(|ctx,[t])> t
    where 
      t := <type-is(|ctx)> ListType(<strip-annos> s)
      
  create-type-task(|ctx) :
    Placeholder(_, Sort(s), Star(), _) -> <task-create-id(|ctx,[t])> t
    where 
      t := <type-is(|ctx)> ListType(<strip-annos> s)
      
rules
  
  create-type-task(|ctx) =
  	?Rhs(<filter(create-type-task(|ctx) <+ not(is-lexical-symbol <+ is-layout-symbol); debug(!"untypable ") ; fail)>)
  ; type-is(|ctx)	
    
  
  create-type-task(|ctx) :
    Sort(s) -> <task-create-id(|ctx,[t])> t
    where 
      t' := <type-lookup(|ctx)> s;
      t  := <task-create-make-set(|ctx)> t'
      
      
  
  //Types for when symbol operators operate on a single sort
  //HACK: it is necessary to strip-annos because of the multiple definitions of Sort(s)
  create-type-task(|ctx) :
    Opt(Sort(s)) -> <task-create-id(|ctx,[t])> t
    where 
      t := <type-is(|ctx)> OptionType(<strip-annos> s)    
  
  create-type-task(|ctx) :
    IterStar(Sort(s)) -> <task-create-id(|ctx,[t])> t
    where 
      t := <type-is(|ctx)> ListType(<strip-annos> s)    
      
  create-type-task(|ctx) :
    Iter(Sort(s)) -> <task-create-id(|ctx,[t])> t
    where 
      t := <type-is(|ctx)> ListType(<strip-annos> s)    
 
  create-type-task(|ctx) :
    IterSep(Sort(s), Lit(x)) -> <task-create-id(|ctx,[t])> t
    where 
      t := <type-is(|ctx)> ListType(<strip-annos> s)    
  
  create-type-task(|ctx) :
    IterStarSep(Sort(s), Lit(x)) -> <task-create-id(|ctx,[t])> t
    where 
      t := <type-is(|ctx)> ListType(<strip-annos> s)    
   
   
   
rules
	
	is-lexical-symbol = collect-one(?Lit(_) + ?CiLit(_) + ?CharClass(_)) 
	is-layout-symbol = collect-one(?Layout() + ?Lex(Layout()) + ?Cf(Layout()))