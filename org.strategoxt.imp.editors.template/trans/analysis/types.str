module analysis/types

imports 
  include/TemplateLang
  libstrc
  runtime/types/collect

imports
  
  lib/runtime/nabl/-
  lib/runtime/task/-
  lib/runtime/types/-
  lib/runtime/properties/-
  lib/runtime/relations/-
  analysis/name-constraints
  analysis/desugar

  
signature
  constructors
  	
  	Inj : Constructor

overlays
  
  SortType(t)    = ConstType(SortNoArgs(t))
  OptionType(t)  = ConstType(Sort("Option", [SortNoArgs(t)]))
  ListType(t)    = ConstType(Sort("List", [SortNoArgs(t)]))
 


rules
  
  create-type-task(|ctx) =
    ?SingleLineTemplate(<filter(?Placeholder(_, _)); map(create-type-task(|ctx))>)//; debug(!"singleline")
  ; type-is(|ctx)
    
  create-type-task(|ctx) =
    ?Template(<mapconcat(?Line(<filter(?Placeholder(_, _)); map(create-type-task(|ctx))>))>) +
    ?TemplateSquare(<mapconcat(?Line(<filter(?Placeholder(_, _)); map(create-type-task(|ctx))>))>) +
    ?TemplateDeprecated(<mapconcat(?Line(<filter(?Placeholder(_, _)); map(create-type-task(|ctx))>))>) +
    ?TemplateSquareDeprecated(<mapconcat(?Line(<filter(?Placeholder(_, _)); map(create-type-task(|ctx))>))>)
    
  ; type-is(|ctx)
    
 // create-type-task(|ctx) :
  //  Placeholder(_, Sort(s), Option(), _) -> <task-create-id(|ctx,[t])> t
  //  where 
  //    t := <type-is(|ctx)> OptionType(<strip-annos> s)    
  
//  create-type-task(|ctx) :
 //  Placeholder(_, Sort(s), Plus(), _) -> <task-create-id(|ctx,[t])> t
  //  where 
  //    t := <type-is(|ctx)> ListType(<strip-annos> s)
      
 // create-type-task(|ctx) :
  //  Placeholder(_, Sort(s), Star(), _) -> <task-create-id(|ctx,[t])> t
  //  where 
   //   t := <type-is(|ctx)> ListType(<strip-annos> s)
      
rules
  
  // create-type-task(|ctx) = 
  // 	?Rhs(<filter(is-typable < create-type-task(|ctx) + debug(!"I FAVE FAILTED "))>)
  // ; debug(!"before ") ; type-is(|ctx) 	
    
  
  create-type-task(|ctx) :
  	Rhs(symbols*) -> <task-create-id(|ctx,[t])> t
  where
  	symbols'* := <filter(is-typable)> symbols*;
  	t         := <type-task(|ctx)> symbols'* 
  
  
  create-type-task(|ctx) :
    Sort(s) -> <task-create-id(|ctx,[t])> t
    where 
      t' := <type-lookup(|ctx)> s;
      t  := <task-create-make-set(|ctx)> t'
      
      
  
  //Types for when symbol operators operate on a single sort
  //HACK: it is necessary to strip-annos because of the multiple definitions of Sort(s)
  create-type-task(|ctx) :
    Opt(Sort(s)) -> <task-create-id(|ctx,[t])> t
    where 
      t := <type-is(|ctx)> OptionType(<strip-annos> s)    
  
  create-type-task(|ctx) :
    IterStar(symbol) -> <task-create-id(|ctx,[t])> t
    where 
      <oncetd(?Sort(s))> symbol;
      t := <type-is(|ctx)> ListType(<strip-annos> s)    
      
  create-type-task(|ctx) :
    Iter(symbol) -> <task-create-id(|ctx,[t])> t
    where 
      <oncetd(?Sort(s))> symbol;	
      t := <type-is(|ctx)> ListType(<strip-annos> s)    
 
  create-type-task(|ctx) :
    IterSep(symbol, Lit(x)) -> <task-create-id(|ctx,[t])> t
    where
      <oncetd(?Sort(s))> symbol; 
      t := <type-is(|ctx)> ListType(<strip-annos> s)    
  
  create-type-task(|ctx) :
    IterStarSep(symbol, Lit(x)) -> <task-create-id(|ctx,[t])> t
    where 
      <oncetd(?Sort(s))> symbol;	
      t := <type-is(|ctx)> ListType(<strip-annos> s)    
   
      
   create-type-task(|ctx) :
    Label(l, symbol) -> <task-create-id(|ctx,[t])> t
    where 
      <is-typable> symbol;
      t := <type-task(|ctx)> symbol   
   
   create-type-task(|ctx) :   
    Lex(symbol) -> <task-create-id(|ctx,[t])> t
    where 
      <is-typable> symbol;
      t := <type-task(|ctx)> symbol   
    	
    create-type-task(|ctx) :   
    Cf(symbol) -> <task-create-id(|ctx,[t])> t
    where 
      <is-typable> symbol;
      t := <type-task(|ctx)> symbol
   
rules
	
	is-typable = oncetd(?Sort(_))
	