module templatelang-to-sdf-1

language TemplateLang
target language SDF

setup [[
  templates
]]

target setup header [[
  module example
  exports
    context-free syntax
]]

test empty [[
  X.Y = <<>>
]]
build generate-sdf-abstract to [[
  -> X {cons("Y")}
]]

test placeholder [[ X.Y = <<Z>> ]]
build generate-sdf-abstract to [[ Z -> X {cons("Y")} ]]

test placeholder (option) [[ X.Y = <<Z?>> ]]
build generate-sdf-abstract to [[ Z? -> X {cons("Y")} ]]

test placeholder (plus) [[ X.Y = <<Z+>> ]]
build generate-sdf-abstract to [[ Z+ -> X {cons("Y")} ]]

test placeholder (star) [[ X.Y = <<Z*>> ]]
build generate-sdf-abstract to [[ Z* -> X {cons("Y")} ]]

test placeholder (plus, separator) [[ X.Y = <<Z+; separator=", ">> ]]
build generate-sdf-abstract to [[ {Z ","}+ -> X {cons("Y")} ]]

test placeholder (star, separator) [[ X.Y = <<Z*; separator=" + ">> ]]
build generate-sdf-abstract to [[ {Z "+"}* -> X {cons("Y")} ]]

test escaped chars in literal [[ X.Y = <<\"\t\n><Z>> ]]
build generate-sdf-abstract to [[ "\"\t\n" Z -> X {cons("Y")} ]]

test escaped chars in separator [[ X.Y = <<Z*; separator="\"">> ]]
build generate-sdf-abstract to [[ {Z "\""}* -> X {cons("Y")} ]]

test completion(...) attribute is erased [[ X.Y = <<Z>> {completion(prefer) }]]
build generate-sdf-abstract to [[ Z -> X {cons("Y")} ]]

target setup footer [[
  context-free syntax
    CONTENTCOMPLETE -> X {cons("COMPLETION-X")}
]]
