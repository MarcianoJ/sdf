module sdf
language TemplateLang

test parse-sdf-string
  <parse-sdf-string> "module example exports context-free syntax A -> B"
    => module(unparameterized("example"), _, _)

test pp-sdf-to-string
  <pp-sdf-to-string> 'module(unparameterized("example"), [], [
    exports(
      context-free-syntax([
        prod(
          [lit("\"@\""), sort("Exp")]
        , sort("MetaAnno")
        , attrs(
            [ term(
                default(appl(unquoted("cons"), [fun(quoted("\"DecoratorAnno\""))]))
              )
            , avoid()
            ]
          )
        )
      ])
    )
  ])
    => "module example\nexports\n  context-free syntax\n    \"@\" Exp -> MetaAnno {cons(\"DecoratorAnno\"), avoid}"

test list-to-conc-grammars (1)
  <list-to-conc-grammars> [] => []

test list-to-conc-grammars (2)
  <list-to-conc-grammars> [1] => 1

test list-to-conc-grammars (3)
  <list-to-conc-grammars> [1, 2] => conc-grammars(1, 2)

test list-to-conc-grammars (4)
  <list-to-conc-grammars> [1, 2, 3] => conc-grammars(conc-grammars(1, 2), 3)
