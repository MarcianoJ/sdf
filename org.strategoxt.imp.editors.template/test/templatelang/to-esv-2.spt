module templatelang-to-esv-2

language TemplateLang
target language EditorService

setup [[
  templates
]]

target setup [[
  module example
  completions
]]

test directed expansion (prefer) [[
  A.F = "foo"
  A.B = "bar" {completion(prefer)}
  B = <x: <A>>
]]
build generate-esv-abstract to [[
  completion template A: "foo" = "foo"
	completion template A: "bar" = "bar"
	completion template B: "x: bar" = "x: " <bar:A>
]]

test directed expansion (avoid) [[
  A.F = "foo" {completion(avoid)}
  A.B = "bar"
  B = <x: <A>>
]]
build generate-esv-abstract to [[
  completion template A: "foo" = "foo"
  completion template A: "bar" = "bar"
  completion template B: "x: bar" = "x: " <bar:A>
]]

test deprecated templates [[
  A.F = "foo" {deprecated}
  A.FF = "ffoo" {deprecated("don't panic")}
  A.B = "bar"
  B = <x: <A>>
]]
build generate-esv-abstract to [[
  // WRONG: completion template A: "foo" = "foo"
  // WRONG: completion template A: "ffoo" = "ffoo"
  completion template A: "bar" = "bar"
  // WRONG: completion template B: "x: foo" = "x: " <foo:A>
  completion template B: "x: bar" = "x: " <bar:A>
]]

test Mobl module [[
  QId = <<ID>>
  QId.QId = <<QId>::<ID>>
  Start.Module = <
    module <QId>

    <Definition*; separator="\n">
  >
]]
build generate-esv-abstract to [[
  completion template QId: "ID::ID" = <ID:QId> "::" <ID:ID>
  completion template Start: "module ID " =
    "module " <ID:QId> "\n\n" (cursor) (blank)
]]
    
test Mobl types [[[[
  QId = <<ID>>
  QId.QId = <<QId>::<ID>>
  NFType.SimpleType = <<QId>>
  NFType.GenericType = [[QId]<[Type*; separator=", "]>]
  NFType.TupleType = <(<Type*; separator=", ">)>
  NFType.ArrayType = <[<Type>]>
  NFType.DynamicType = <?>
  Type = <<NFType>>
  Type.FunctionType = [[NFType+; separator=" * "] -> [NFType]] {avoid}

  FunctionDef.Function = <
    <MetaAnno*; separator="\n", hide>
    function <QId>(<FArg*; separator=", ">) : <Type> {
      <Statement*; separator="\n">
    }
  >
]]]]
build generate-esv-abstract to [[
  completion template QId: "ID::ID" = <ID:QId> "::" <ID:ID>
  completion template NFType: "ID<>" = <ID:QId> "<" <:Type> ">"
  completion template NFType: "()" = "(" <:Type> ")"
  completion template NFType: "[?]" = "[" <?:Type> "]"
  completion template NFType: "?" = "?"
  completion template Type: "? -> ?" = <?:NFType> " -> " <?:NFType>
  completion template FunctionDef: "function ID() : ? { }" =
    "function " <ID:QId> "(" <:FArg> ") : " <?:Type> " {\n\t" (cursor) "\n}" (blank)
]]

test template-character-count (1)
  !(String("foo"), Placeholder("Sort", None(), Options([Text("f")])), [Layout("bar"), String("baz")]);
  template-character-count => 10

test template-character-count (2)
  ![
  	Placeholder(sort("NFType"),Plus(),[Text("ID"),Separator(" * ")]),
    Layout(" "),String("->"),Layout(" "),
    Placeholder(sort("NFType"),None(),[Text("ID")])
  ];
  template-character-count => 8

test template-character-count (3)
  ![Placeholder(sort("NFType"),None(),[Text("ID")])];
  template-character-count => 2

test template-compare (1)
  !([
      Placeholder(sort("NFType"),Plus(),[Text("ID"),Separator(" * ")]),
      Layout(" "),String("->"),Layout(" "),
      Placeholder(sort("NFType"),None(),[Text("ID")])
    ]{0},
    [
  	  Placeholder(sort("NFType"),None(),[Text("ID")])
	  ]{0}
	 );
	 template-compare fails

test template-compare (2)
  !([
      Placeholder(sort("NFType"),None(),[Text("ID")])
    ]{0},
  	[
      Placeholder(sort("NFType"),Plus(),[Text("ID"),Separator(" * ")]),
      Layout(" "),String("->"),Layout(" "),
      Placeholder(sort("NFType"),None(),[Text("ID")])
    ]{0}
   );
   template-compare => _

test substring(1, -1)
  !"foo";
  string-as-chars(Tl; init) => "o"

test remove spaces
  !"foo   bar    baz";
  string-as-chars(listbu(try(\[' ', ' ' | t] -> [' ' | t]\))) => "foo bar baz"
